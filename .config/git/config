[alias]
    co = checkout
    ci = commit
    st = status
    unstage = reset HEAD --
    last = log -1 HEAD
    delete = branch -d
    ppull = pull -p --no-recurse-submodules
    pfetch = fetch -p
    hardreset = reset --hard @{u}
    fpush = push --force-with-lease
    ld = log --pretty=format:\"%C(yellow)%h\\ %ad%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]\" --decorate --date=relative
    lg = !bash -c 'git log --reverse --no-merges --pretty=format:\"%C(yellow)%h %C(reset)%s\" --decorate \"${1:-$(git default-branch)}\"..HEAD' -
    sw = switch
    softreset = reset --soft HEAD~
    default-branch = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
    clean-branches = !git branch --merged origin/\"$(git default-branch)\" | egrep -v \"[*+]|$(git default-branch)\\$\" | xargs -n 1 git branch --delete
    clean-gone = !git branch --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" { print $1 }' | xargs -n 1 git branch -D
    alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
    aliases = "!echo [alias]; git config --get-regexp 'alias[.].*' | sed -E 's/alias[.]([^[:space:]]+)/\t\\1 =/'"
    bc = branch-clean
    bpull = !sh -c 'git fetch origin $1:$1' -
    vdiff = difftool -d HEAD
    conflicts = !sh -c 'git diff --name-only --diff-filter=U --line-prefix="$(git rev-parse --show-toplevel)/"'
    # Helpers for quoting/unquoting git aliases, from https://stackoverflow.com/questions/38057261/git-config-alias-escaping
    quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
    quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"
    assign-pr = "!f() { PR=\"$1\"; shift; BR=\"${1:-$(git symbolic-ref HEAD | sed 's#refs/heads/##')}\"; git config \"branch.${BR}.github-pr-owner-number\" \"$(gh repo view --json nameWithOwner -q '.nameWithOwner' | tr '/' '#')#$PR\"; }; f"
    git = !git
    merge-latest = !sh -c \"git bpull $1 && git merge $1\"
    recommit = !git commit -eF \"$(git rev-parse --git-dir)/COMMIT_EDITMSG\"
    dir-diff = ! COMPARE_FOLDERS=DIFF git difftool --dir-diff
    sswitch = !sh -c 'git stash && git switch \"$@\" && git stash pop' -
    ssw = sswitch
    su = submodule update
    copy = !fish -c \"git diff --unified=3 $argv | fish_clipboard_copy\" --
    paste = !fish -c \"fish_clipboard_paste | git apply $argv\" --
    ls = ls-files
[tag]
    sort = version:refname
[core]
    # editor unset, rely on $EDITOR to be set to my preference
    quotePath = true
    protectNTFS = false
    longpaths = true
    # autocrlf = input # TODO: double check this in windows/wsl/etc
    symlinks = true
[column]
    ui = auto
[diff]
    tool = code
    context = 5
    algorithm = histogram
    colorMoved = plain
    # May not necessarily want to keep this one:
    mnemonicPrefix = true
    renames = true
[difftool]
    trustExitCode = true
    prompt = false
[difftool "vimdiff"]
    cmd = vim -c "\"DirDiff $LOCAL $REMOTE\""
[difftool "code"]
    cmd = code --wait --diff --new-window $LOCAL $REMOTE
[merge]
    renameLimit = 2000
    autoStash = true
[submodule]
    recurse = true
[push]
    # Override 'submodule.recurse' to make rpush work without warnings
    recurseSubmodules = no
    autoSetupRemote = true
    default = current
[pull]
    rebase = false
[commit]
    gpgsign = true
    verbose = true
[gpg]
    program = gpg
[checkout]
    defaultRemote = origin
[init]
    defaultBranch = main
[fetch]
    recurseSubmodules = no
[protocol "file"]
    allow = always
[gui]
    editor = code
[advice]
    detachedHead = false
[help]
    autocorrect = prompt
[rerere]
    enabled = true
    autoupdate = true
[rebase]
    autoSquash = true
    autoStash = true
    updateRefs = true
[filter "lfs"]
    required = true
    # Don't configure process filter, my wrapper doesn't work with it
    smudge = ~/.local/bin/git-lfs-wrapper smudge -- %f
    clean = ~/.local/bin/git-lfs-wrapper clean -- %f
[lfs]
    # Don't hard-fail if some LFS files can't be downloaded during checkout.
    # Without this, git repo is left in partially checked out state and it sucks
    skipdownloaderrors = true

# NOTE: This has to come last to override other settings, e.g. user.email
[include]
    path = ~/.gitconfig.local
    path = ~/.config/git/config.local
