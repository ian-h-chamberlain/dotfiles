#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# shellcheck source=utils.sh
source ~/.config/yadm/utils.sh

OS_NAME=$(uname -s)

# A "full" bootstrap means to run everything. Otherwise just update vscode extension
# (and maybe fish completions)
YADM_BOOTSTRAP_FULL=0

function setup_macos() {
    # Install homebrew and use it to install basic packages/apps
    if ! command -v brew &>/dev/null && \
        confirm "'brew' command not found. Install it? "
    then
        eval "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        echo
    fi

    # Specify iTerm2 preferences directory
    #shellcheck disable=SC2088
    defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string '~/.config/iterm2/'
    defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true

    # TODO: should there be a step to `brew bundle cleanup` here?
    if ! brew bundle --global check && \
        confirm "Install packages from Brewfile? "
    then
        brew bundle --global install
        echo
    fi

    echo "macOS setup is complete!"
}

function setup_linux() {
    # TBD. Might need separate function each for NixOS / Termux
    # To consider: brew on linux? Gets a bunch of stuff for free I guess...
    :
}

function main() {
    yadm submodule update --init

    # Include "shared" git config in yadm repo
    yadm enter git config --local include.path ~/.config/yadm/.gitconfig

    if [[ $YADM_BOOTSTRAP_FULL -eq 1 ]]; then
        # For now, OS-specific bootstrap is part of "full". Might make sense
        # to break them out separately in the future.
        if [[ "$OS_NAME" == "Darwin" ]]; then
            setup_macos
        elif [[ "$OS_NAME" == "Linux" ]]; then
            setup_linux
        fi

        if confirm "Update fish auto-generated completions?"; then
            fish -c 'fish_update_completions'
        fi

        # Load GPG configuration for timeouts
        gpgconf --reload gpg-agent

        if confirm "Decrypt encrypted files?"; then
            yadm git-crypt unlock
        fi
    fi

    if ! check_vscode_exts &>/dev/null && \
        confirm "Install VSCode extensions?"
    then
        install_vscode_exts
    else
        echo "VSCode extensions are up-to-date."
    fi
}

main "$@"
