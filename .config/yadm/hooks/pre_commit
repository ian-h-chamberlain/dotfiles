#!/usr/bin/env bash

set -o nounset

tmpdir=$(mktemp -d)
trap 'rm -rf $tmpdir' EXIT
trap 'echo ; exit -2' INT

# Start from the base yadm directory
cd "$(dirname "${BASH_SOURCE[0]}")" || exit_with_error "Failed to find yadm directory!"
cd .. || exit_with_error "Failed to find yadm directory!"

if [[ "$YADM_HOOK_FULL_COMMAND" =~ (^| )(--no-verify|-n)($| ) ]]; then
    # Same as `git commit --no-verify`
    exit 0
fi

export GIT_DIR="$YADM_HOOK_REPO"
export GIT_WORKTREE="$YADM_HOOK_WORK"

hooks/pre-commit.pyz run --show-diff-on-failure --config .pre-commit-config.yaml || exit $?
unset GIT_DIR GIT_WORKTREE

# shellcheck source=../utils.sh
source utils.sh

# skip checks for merge commits:
if is_merging; then
    exit 0
fi

WARNINGS=0

# Sort of hacky, but handle `yadm commit -a` to check all modified files
cached_arg=""
if ! [[ "$YADM_HOOK_FULL_COMMAND" =~ ( )-a($| ) ]]; then
    cached_arg="--cached"
fi
CHANGED_FILES=$(yadm diff $cached_arg --name-only --diff-filter=ACM)

if grep --quiet Brewfile <(echo "$CHANGED_FILES") && command -v brew >/dev/null; then
    # A little faster if we don't have to wait for auto-update
    export HOMEBREW_NO_AUTO_UPDATE=1
    set -o pipefail

    # TODO: maybe check this all the time instead of just when brewfile changes
    if command -v jq >/dev/null; then
        echo "Checking that all installed packages are in Brewfile..."
        if ! {
            brew bundle dump --quiet --file "$tmpdir/Brewfile" &&
            brew bundle install --quiet --no-upgrade --file "$tmpdir/Brewfile"
        } >/dev/null; then
            warn "Failed to dump current brew packages"
            WARNINGS=$((WARNINGS + 1))
        fi

        # TODO: only add `brew leaves` packages, not all lockfile packages

        jq '.entries | .brew | to_entries | .[].key' -r "$tmpdir/Brewfile.lock.json" |
            xargs brew add --global --formula 2>/dev/null
        WARNINGS=$((WARNINGS + $?))
        jq '.entries | .cask | to_entries | .[].key' -r "$tmpdir/Brewfile.lock.json" |
            xargs brew add --cask --file ~/.config/brew/20-os.Brewfile 2>/dev/null
        WARNINGS=$((WARNINGS + $?))

        # TODO: add warning if entries added, pre-commit would make this easier

        # TODO: vscode not supported yet
        # jq '.entries | .vscode | to_entries | .[].key' -r "$tmpdir/Brewfile.lock.json" |
        #     xargs brew add --file ~/.config/brew/30-vscode.Brewfile
    fi

    echo "Checking that all packages in Brewfile are installed..."
    if ! brew bundle check --global --no-upgrade --verbose | grep -E 'needs|satisfied'; then
        warn "Brewfile(s) is out of date or incorrect"
        WARNINGS=$((WARNINGS + 1))
    fi

    set +o pipefail
fi

# Check for unstaged changes (typically new functions/completions or config files)
CHECK_UNTRACKED_DIRS=(
    ~/.config/fish/
    ~/.config/thefuck/
)
untracked_files=$(
    yadm ls-files --full-name --exclude-standard --others -- "${CHECK_UNTRACKED_DIRS[@]}"
)
if [[ $untracked_files ]]; then
    exit_with_error "Untracked files found in repository:" "$untracked_files"
fi

if grep -q fish <(echo "$CHANGED_FILES"); then
    fish -c fish_check_saved_functions
    failed_files=$?
    if [[ $failed_files -ne 0 ]] ; then
        exit_with_error "$failed_files files failed fish lint/format checks!"
    fi
fi

if grep -E 'path = /|submodule "/' -- ~/.gitmodules; then
    exit_with_error "Submodule paths in $HOME/.gitmodules should be relative!"
fi

if [ $WARNINGS -gt 0 ]; then
    read -r -p "Some pre-commit checks had warnings. Press enter to continue or Ctrl-C to cancel."
fi

# TODO: convert other scripts to fish instead of bash (except bootstrap)
# or actually, just user pre-commit instead of this mess. Maybe bootstrap could
# also be converted to something less complicated
