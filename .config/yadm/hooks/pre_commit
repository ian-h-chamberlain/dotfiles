#!/usr/bin/env bash

set -o nounset

trap 'echo ; exit -2' INT

# Start from the base yadm directory
cd "$(dirname "${BASH_SOURCE[0]}")" || exit_with_error "Failed to find yadm directory!"
cd .. || exit_with_error "Failed to find yadm directory!"

if [[ "$YADM_HOOK_FULL_COMMAND" =~ (^| )(--no-verify|-n)($| ) ]]; then
    # Same as `git commit --no-verify`
    exit 0
fi

# shellcheck source=../utils.sh
source utils.sh

# skip checks for merge commits:
if is_merging; then
    exit 0
fi

WARNINGS=0

# Sort of hacky, but handle `yadm commit -a` to check all modified files
cached_arg=""
if ! [[ "$YADM_HOOK_FULL_COMMAND" =~ ( )-a($| ) ]]; then
    cached_arg="--cached"
fi
CHANGED_FILES=$(yadm diff $cached_arg --name-only --diff-filter=ACM)

if command -v shellcheck >/dev/null; then
    SHELLCHECK_SOURCES=(
        bootstrap
        utils.sh
        hooks/*
    )

    if ! shellcheck --source-path=SCRIPTDIR "${SHELLCHECK_SOURCES[@]}"; then
        exit_with_error "Some files failed the shellcheck linter!"
    fi
fi

if grep --quiet Brewfile <(echo "$CHANGED_FILES"); then
    echo "Checking that all packages in Brewfile are installed..."
    # A little faster if we don't have to wait for auto-update
    export HOMEBREW_NO_AUTO_UPDATE=1
    if ! brew bundle check --global --no-upgrade --verbose ; then
        warn "Brewfile(s) is out of date or incorrect"
        WARNINGS=$((WARNINGS + 1))
    fi
fi

# Check for unstaged changes (typically new functions/completions or config files)
CHECK_UNTRACKED_DIRS=(
    ~/.config/fish/
    ~/.config/thefuck/
)
untracked_files=$(
    yadm ls-files --full-name --exclude-standard --others -- "${CHECK_UNTRACKED_DIRS[@]}"
)
if [[ $untracked_files ]]; then
    exit_with_error "Untracked files found in repository:" "$untracked_files"
fi

if grep -q fish <(echo "$CHANGED_FILES"); then
    fish -c fish_check_saved_functions
    failed_files=$?
    if [[ $failed_files -ne 0 ]] ; then
        exit_with_error "$failed_files files failed fish lint/format checks!"
    fi
fi

if grep -E 'path = /|submodule "/' -- ~/.gitmodules; then
    exit_with_error "Submodule paths in $HOME/.gitmodules should be relative!"
fi

if [ $WARNINGS -gt 0 ]; then
    read -r -p "Some pre-commit checks had warnings. Press enter to continue or Ctrl-C to cancel."
fi

# TODO: convert other scripts to fish instead of bash (except bootstrap)
