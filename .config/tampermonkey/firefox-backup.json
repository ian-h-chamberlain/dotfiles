{
    "version": "1",
    "created_by": "Tampermonkey",
    "scripts": [
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/38582-wanikani-open-framework/code/Wanikani%20Open%20Framework.user.js",
            "name": "Wanikani Open Framework",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "https://www.wanikani.com/*",
                        "https://preview.wanikani.com/*"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-start",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "sandbox": null,
                "tab_types": null,
                "unwrap": null
            },
            "position": 1,
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFdhbmlrYW5pIE9wZW4gRnJhbWV3b3JrCi8vIEBuYW1lc3BhY2UgICByZmluZGxleQovLyBAZGVzY3JpcHRpb24gRnJhbWV3b3JrIGZvciB3cml0aW5nIHNjcmlwdHMgZm9yIFdhbmlrYW5pCi8vIEB2ZXJzaW9uICAgICAxLjAuNjAKLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vd3d3LndhbmlrYW5pLmNvbS8qCi8vIEBtYXRjaCAgICAgICBodHRwczovL3ByZXZpZXcud2FuaWthbmkuY29tLyoKLy8gQGNvcHlyaWdodCAgIDIwMjIrLCBSb2JpbiBGaW5kbGV5Ci8vIEBsaWNlbnNlICAgICBNSVQ7IGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBncmFudCAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKGdsb2JhbCkgewoJJ3VzZSBzdHJpY3QnOwoKCS8qIGVzbGludCBuby1tdWx0aS1zcGFjZXM6IG9mZiAqLwoJLyogZ2xvYmFscyB3a29mICovCgoJdmFyIHZlcnNpb24gPSAnMS4wLjU5JzsKCXZhciBpZ25vcmVfbWlzc2luZ19pbmRleGVkZGIgPSBmYWxzZTsKCgkvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFN1cHBvcnRlZCBNb2R1bGVzCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJdmFyIHN1cHBvcnRlZF9tb2R1bGVzID0gewoJCUFwaXYyOiAgICB7IHVybDogJ2h0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zODU4MS13YW5pa2FuaS1vcGVuLWZyYW1ld29yay1hcGl2Mi1tb2R1bGUvY29kZS9XYW5pa2FuaSUyME9wZW4lMjBGcmFtZXdvcmslMjAtJTIwQXBpdjIlMjBtb2R1bGUuanM/dmVyc2lvbj0xMDkxNzg1J30sCgkJSXRlbURhdGE6IHsgdXJsOiAnaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzM4NTgwLXdhbmlrYW5pLW9wZW4tZnJhbWV3b3JrLWl0ZW1kYXRhLW1vZHVsZS9jb2RlL1dhbmlrYW5pJTIwT3BlbiUyMEZyYW1ld29yayUyMC0lMjBJdGVtRGF0YSUyMG1vZHVsZS5qcz92ZXJzaW9uPTEwMzAxNTknfSwKCQlKcXVlcnk6ICAgeyB1cmw6ICdodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDUxMDc4LXdhbmlrYW5pLW9wZW4tZnJhbWV3b3JrLWpxdWVyeS1tb2R1bGUvY29kZS9XYW5pa2FuaSUyME9wZW4lMjBGcmFtZXdvcmslMjAtJTIwSnF1ZXJ5JTIwbW9kdWxlLmpzP3ZlcnNpb249MTA5MTc5NCd9LAoJCU1lbnU6ICAgICB7IHVybDogJ2h0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zODU3OC13YW5pa2FuaS1vcGVuLWZyYW1ld29yay1tZW51LW1vZHVsZS9jb2RlL1dhbmlrYW5pJTIwT3BlbiUyMEZyYW1ld29yayUyMC0lMjBNZW51JTIwbW9kdWxlLmpzP3ZlcnNpb249MTA5MTc4Nyd9LAoJCVByb2dyZXNzOiB7IHVybDogJ2h0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zODU3Ny13YW5pa2FuaS1vcGVuLWZyYW1ld29yay1wcm9ncmVzcy1tb2R1bGUvY29kZS9XYW5pa2FuaSUyME9wZW4lMjBGcmFtZXdvcmslMjAtJTIwUHJvZ3Jlc3MlMjBtb2R1bGUuanM/dmVyc2lvbj0xMDkxNzkyJ30sCgkJU2V0dGluZ3M6IHsgdXJsOiAnaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzM4NTc2LXdhbmlrYW5pLW9wZW4tZnJhbWV3b3JrLXNldHRpbmdzLW1vZHVsZS9jb2RlL1dhbmlrYW5pJTIwT3BlbiUyMEZyYW1ld29yayUyMC0lMjBTZXR0aW5ncyUyMG1vZHVsZS5qcz92ZXJzaW9uPTEwOTE3OTMnfSwKCX07CgoJLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBQdWJsaXNoZWQgaW50ZXJmYWNlCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJdmFyIHB1Ymxpc2hlZF9pbnRlcmZhY2UgPSB7CgkJaW5jbHVkZTogaW5jbHVkZSwgICAgICAgICAgICAgIC8vIGluY2x1ZGUobW9kdWxlX2xpc3QpICAgICAgICA9PiBQcm9taXNlCgkJcmVhZHk6ICAgcmVhZHksICAgICAgICAgICAgICAgIC8vIHJlYWR5KG1vZHVsZV9saXN0KSAgICAgICAgICA9PiBQcm9taXNlCgoJCWxvYWRfZmlsZTogICBsb2FkX2ZpbGUsICAgICAgICAvLyBsb2FkX2ZpbGUodXJsLCB1c2VfY2FjaGUpICAgPT4gUHJvbWlzZQoJCWxvYWRfY3NzOiAgICBsb2FkX2NzcywgICAgICAgICAvLyBsb2FkX2Nzcyh1cmwsIHVzZV9jYWNoZSkgICAgPT4gUHJvbWlzZQoJCWxvYWRfc2NyaXB0OiBsb2FkX3NjcmlwdCwgICAgICAvLyBsb2FkX3NjcmlwdCh1cmwsIHVzZV9jYWNoZSkgPT4gUHJvbWlzZQoKCQlmaWxlX2NhY2hlOiB7CgkJCWRpcjogICAge30sICAgICAgICAgICAgICAgIC8vIE9iamVjdCBjb250YWluaW5nIGRpcmVjdG9yeSBvZiBmaWxlcy4KCQkJbHM6ICAgICBmaWxlX2NhY2hlX2xpc3QsICAgLy8gbHMoKQoJCQljbGVhcjogIGZpbGVfY2FjaGVfY2xlYXIsICAvLyBjbGVhcigpICAgICAgICAgICAgID0+IFByb21pc2UKCQkJZGVsZXRlOiBmaWxlX2NhY2hlX2RlbGV0ZSwgLy8gZGVsZXRlKG5hbWUpICAgICAgICA9PiBQcm9taXNlCgkJCWZsdXNoOiAgZmlsZV9jYWNoZV9mbHVzaCwgIC8vIGZsdXNoKCkgICAgICAgICAgICAgPT4gUHJvbWlzZQoJCQlsb2FkOiAgIGZpbGVfY2FjaGVfbG9hZCwgICAvLyBsb2FkKG5hbWUpICAgICAgICAgID0+IFByb21pc2UKCQkJc2F2ZTogICBmaWxlX2NhY2hlX3NhdmUsICAgLy8gc2F2ZShuYW1lLCBjb250ZW50KSA9PiBQcm9taXNlCgkJCW5vX2NhY2hlOmZpbGVfbm9jYWNoZSwgICAgIC8vIG5vX2NhY2hlKG1vZHVsZXMpCgkJfSwKCgkJb246ICAgICAgd2FpdF9ldmVudCwgICAgICAgICAgIC8vIG9uKGV2ZW50LCBjYWxsYmFjaykKCQl0cmlnZ2VyOiB0cmlnZ2VyX2V2ZW50LCAgICAgICAgLy8gdHJpZ2dlcihldmVudFssIGRhdGExWywgZGF0YTJbLCAuLi5dXV0pCgoJCWdldF9zdGF0ZTogIGdldF9zdGF0ZSwgICAgICAgICAvLyBnZXQoc3RhdGVfdmFyKQoJCXNldF9zdGF0ZTogIHNldF9zdGF0ZSwgICAgICAgICAvLyBzZXQoc3RhdGVfdmFyLCB2YWx1ZSkKCQl3YWl0X3N0YXRlOiB3YWl0X3N0YXRlLCAgICAgICAgLy8gd2FpdChzdGF0ZV92YXIsIHZhbHVlWywgY2FsbGJhY2tbLCBwZXJzaXN0ZW50XV0pID0+IGlmIG5vIGNhbGxiYWNrLCByZXR1cm4gb25lLXNob3QgUHJvbWlzZQoKCQl2ZXJzaW9uOiB7CgkJCXZhbHVlOiB2ZXJzaW9uLAoJCQljb21wYXJlX3RvOiBjb21wYXJlX3RvLCAgICAvLyBjb21wYXJlX3ZlcnNpb24odmVyc2lvbikKCQl9Cgl9OwoKCXB1Ymxpc2hlZF9pbnRlcmZhY2Uuc3VwcG9ydF9maWxlcyA9IHsKCQknanF1ZXJ5LmpzJzogJ2h0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzMuNi4xL2pxdWVyeS5taW4uanMnLAoJCSdqcXVlcnlfdWkuanMnOiAnaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnl1aS8xLjEyLjEvanF1ZXJ5LXVpLm1pbi5qcycsCgkJJ2pxdWlfd2ttYWluLmNzcyc6ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcmZpbmRsZXkvd2FuaWthbmktb3Blbi1mcmFtZXdvcmsvMTU1MGFmODM4M2VjMjhhZDQwNmNmNDAxYWVlMmRlNGM1MjQ0NmY2Yy9qcXVpLXdrbWFpbi5jc3MnLAoJfTsKCgkvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCWZ1bmN0aW9uIHNwbGl0X2xpc3Qoc3RyKSB7cmV0dXJuIHN0ci5yZXBsYWNlKC/jgIEvZywnLCcpLnJlcGxhY2UoL1tcc+OAgF0rL2csJyAnKS50cmltKCkucmVwbGFjZSgvICosICovZywgJywnKS5zcGxpdCgnLCcpLmZpbHRlcihmdW5jdGlvbihuYW1lKSB7cmV0dXJuIChuYW1lLmxlbmd0aCA+IDApO30pO30KCWZ1bmN0aW9uIHByb21pc2UoKXt2YXIgYSxiLGM9bmV3IFByb21pc2UoZnVuY3Rpb24oZCxlKXthPWQ7Yj1lO30pO2MucmVzb2x2ZT1hO2MucmVqZWN0PWI7cmV0dXJuIGM7fQoKCS8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIENvbXBhcmUgdGhlIGZyYW1ld29yayB2ZXJzaW9uIGFnYWluc3QgYSBzcGVjaWZpYyB2ZXJzaW9uLgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIGNvbXBhcmVfdG8oY2xpZW50X3ZlcnNpb24pIHsKCQl2YXIgY2xpZW50X3ZlciA9IGNsaWVudF92ZXJzaW9uLnNwbGl0KCcuJykubWFwKGQgPT4gTnVtYmVyKGQpKTsKCQl2YXIgd2tvZl92ZXIgPSB2ZXJzaW9uLnNwbGl0KCcuJykubWFwKGQgPT4gTnVtYmVyKGQpKTsKCQl2YXIgbGVuID0gTWF0aC5tYXgoY2xpZW50X3Zlci5sZW5ndGgsIHdrb2ZfdmVyLmxlbmd0aCk7CgkJZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuOyBpZHgrKykgewoJCQl2YXIgYSA9IGNsaWVudF92ZXJbaWR4XSB8fCAwOwoJCQl2YXIgYiA9IHdrb2ZfdmVyW2lkeF0gfHwgMDsKCQkJaWYgKGEgPT09IGIpIGNvbnRpbnVlOwoJCQlpZiAoYSA8IGIpIHJldHVybiAnbmV3ZXInOwoJCQlyZXR1cm4gJ29sZGVyJzsKCQl9CgkJcmV0dXJuICdzYW1lJzsKCX0KCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gSW5jbHVkZSBhIGxpc3Qgb2YgbW9kdWxlcy4KCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgl2YXIgaW5jbHVkZV9wcm9taXNlcyA9IHt9OwoKCWZ1bmN0aW9uIGluY2x1ZGUobW9kdWxlX2xpc3QpIHsKCQlpZiAod2tvZi5nZXRfc3RhdGUoJ3drb2Yud2tvZicpICE9PSAncmVhZHknKSB7CgkJCXJldHVybiB3a29mLnJlYWR5KCd3a29mJykudGhlbihmdW5jdGlvbigpe3JldHVybiB3a29mLmluY2x1ZGUobW9kdWxlX2xpc3QpO30pOwoJCX0KCQl2YXIgaW5jbHVkZV9wcm9taXNlID0gcHJvbWlzZSgpOwoJCXZhciBtb2R1bGVfbmFtZXMgPSBzcGxpdF9saXN0KG1vZHVsZV9saXN0KTsKCQl2YXIgc2NyaXB0X2NudCA9IG1vZHVsZV9uYW1lcy5sZW5ndGg7CgkJaWYgKHNjcmlwdF9jbnQgPT09IDApIHsKCQkJaW5jbHVkZV9wcm9taXNlLnJlc29sdmUoe2xvYWRlZDpbXSwgZmFpbGVkOltdfSk7CgkJCXJldHVybiBpbmNsdWRlX3Byb21pc2U7CgkJfQoKCQl2YXIgZG9uZV9jbnQgPSAwOwoJCXZhciBsb2FkZWQgPSBbXSwgZmFpbGVkID0gW107CgkJdmFyIG5vX2NhY2hlID0gc3BsaXRfbGlzdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd2tvZi5pbmNsdWRlLm5vY2FjaGUnKSB8fCAnJyk7CgkJZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbW9kdWxlX25hbWVzLmxlbmd0aDsgaWR4KyspIHsKCQkJdmFyIG1vZHVsZV9uYW1lID0gbW9kdWxlX25hbWVzW2lkeF07CgkJCXZhciBtb2R1bGUgPSBzdXBwb3J0ZWRfbW9kdWxlc1ttb2R1bGVfbmFtZV07CgkJCWlmICghbW9kdWxlKSB7CgkJCQlmYWlsZWQucHVzaCh7bmFtZTptb2R1bGVfbmFtZSwgdXJsOnVuZGVmaW5lZH0pOwoJCQkJY2hlY2tfZG9uZSgpOwoJCQkJY29udGludWU7CgkJCX0KCQkJdmFyIGF3YWl0X2xvYWQgPSBpbmNsdWRlX3Byb21pc2VzW21vZHVsZV9uYW1lXTsKCQkJdmFyIHVzZV9jYWNoZSA9IChub19jYWNoZS5pbmRleE9mKG1vZHVsZV9uYW1lKSA8IDApICYmIChub19jYWNoZS5pbmRleE9mKCcqJykgPCAwKTsKCQkJaWYgKCF1c2VfY2FjaGUpIGZpbGVfY2FjaGVfZGVsZXRlKG1vZHVsZS51cmwpOwoJCQlpZiAoYXdhaXRfbG9hZCA9PT0gdW5kZWZpbmVkKSBpbmNsdWRlX3Byb21pc2VzW21vZHVsZV9uYW1lXSA9IGF3YWl0X2xvYWQgPSBsb2FkX3NjcmlwdChtb2R1bGUudXJsLCB1c2VfY2FjaGUpOwoJCQlhd2FpdF9sb2FkLnRoZW4ocHVzaF9sb2FkZWQsIHB1c2hfZmFpbGVkKTsKCQl9CgoJCXJldHVybiBpbmNsdWRlX3Byb21pc2U7CgoJCWZ1bmN0aW9uIHB1c2hfbG9hZGVkKHVybCkgewoJCQlsb2FkZWQucHVzaCh1cmwpOwoJCQljaGVja19kb25lKCk7CgkJfQoKCQlmdW5jdGlvbiBwdXNoX2ZhaWxlZCh1cmwpIHsKCQkJZmFpbGVkLnB1c2godXJsKTsKCQkJY2hlY2tfZG9uZSgpOwoJCX0KCgkJZnVuY3Rpb24gY2hlY2tfZG9uZSgpIHsKCQkJaWYgKCsrZG9uZV9jbnQgPCBzY3JpcHRfY250KSByZXR1cm47CgkJCWlmIChmYWlsZWQubGVuZ3RoID09PSAwKSBpbmNsdWRlX3Byb21pc2UucmVzb2x2ZSh7bG9hZGVkOmxvYWRlZCwgZmFpbGVkOmZhaWxlZH0pOwoJCQllbHNlIGluY2x1ZGVfcHJvbWlzZS5yZWplY3Qoe2Vycm9yOidGYWlsdXJlIGxvYWRpbmcgbW9kdWxlJywgbG9hZGVkOmxvYWRlZCwgZmFpbGVkOmZhaWxlZH0pOwoJCX0KCX0KCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gV2FpdCBmb3IgYWxsIG1vZHVsZXMgdG8gcmVwb3J0IHRoYXQgdGhleSBhcmUgcmVhZHkKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCglmdW5jdGlvbiByZWFkeShtb2R1bGVfbGlzdCkgewoJCXZhciBtb2R1bGVfbmFtZXMgPSBzcGxpdF9saXN0KG1vZHVsZV9saXN0KTsKCgkJdmFyIHJlYWR5X3Byb21pc2VzID0gWyBdOwoJCWZvciAodmFyIGlkeCBpbiBtb2R1bGVfbmFtZXMpIHsKCQkJdmFyIG1vZHVsZV9uYW1lID0gbW9kdWxlX25hbWVzW2lkeF07CgkJCXJlYWR5X3Byb21pc2VzLnB1c2god2FpdF9zdGF0ZSgnd2tvZi4nICsgbW9kdWxlX25hbWUsICdyZWFkeScpKTsKCQl9CgoJCWlmIChyZWFkeV9wcm9taXNlcy5sZW5ndGggPT09IDApIHsKCQkJcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwoJCX0gZWxzZSBpZiAocmVhZHlfcHJvbWlzZXMubGVuZ3RoID09PSAxKSB7CgkJCXJldHVybiByZWFkeV9wcm9taXNlc1swXTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gUHJvbWlzZS5hbGwocmVhZHlfcHJvbWlzZXMpOwoJCX0KCX0KCS8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIExvYWQgYSBmaWxlIGFzeW5jaHJvbm91c2x5LCBhbmQgcGFzcyB0aGUgZmlsZSBhcyByZXNvbHZlZCBQcm9taXNlIGRhdGEuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gbG9hZF9maWxlKHVybCwgdXNlX2NhY2hlKSB7CgkJdmFyIGZldGNoX3Byb21pc2UgPSBwcm9taXNlKCk7CgkJdmFyIG5vX2NhY2hlID0gc3BsaXRfbGlzdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd2tvZi5sb2FkX2ZpbGUubm9jYWNoZScpIHx8ICcnKTsKCQlpZiAobm9fY2FjaGUuaW5kZXhPZih1cmwpID49IDAgfHwgbm9fY2FjaGUuaW5kZXhPZignKicpID49IDApIHVzZV9jYWNoZSA9IGZhbHNlOwoJCWlmICh1c2VfY2FjaGUgPT09IHRydWUpIHsKCQkJcmV0dXJuIGZpbGVfY2FjaGVfbG9hZCh1cmwsIHVzZV9jYWNoZSkuY2F0Y2goZmV0Y2hfdXJsKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZmV0Y2hfdXJsKCk7CgkJfQoKCQkvLyBSZXRyaWV2ZSBmaWxlIGZyb20gc2VydmVyCgkJZnVuY3Rpb24gZmV0Y2hfdXJsKCl7CgkJCXZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgkJCXJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gcHJvY2Vzc19yZXN1bHQ7CgkJCXJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTsKCQkJcmVxdWVzdC5zZW5kKCk7CgkJCXJldHVybiBmZXRjaF9wcm9taXNlOwoJCX0KCgkJZnVuY3Rpb24gcHJvY2Vzc19yZXN1bHQoZXZlbnQpewoJCQlpZiAoZXZlbnQudGFyZ2V0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjsKCQkJaWYgKGV2ZW50LnRhcmdldC5zdGF0dXMgPj0gNDAwIHx8IGV2ZW50LnRhcmdldC5zdGF0dXMgPT09IDApIHJldHVybiBmZXRjaF9wcm9taXNlLnJlamVjdChldmVudC50YXJnZXQuc3RhdHVzKTsKCQkJaWYgKHVzZV9jYWNoZSkgewoJCQkJZmlsZV9jYWNoZV9zYXZlKHVybCwgZXZlbnQudGFyZ2V0LnJlc3BvbnNlKQoJCQkJLnRoZW4oZmV0Y2hfcHJvbWlzZS5yZXNvbHZlLmJpbmQobnVsbCxldmVudC50YXJnZXQucmVzcG9uc2UpKTsKCQkJfSBlbHNlIHsKCQkJCWZldGNoX3Byb21pc2UucmVzb2x2ZShldmVudC50YXJnZXQucmVzcG9uc2UpOwoJCQl9CgkJfQoJfQoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBMb2FkIGFuZCBpbnN0YWxsIGEgc3BlY2lmaWMgZmlsZSB0eXBlIGludG8gdGhlIERPTS4KCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCglmdW5jdGlvbiBsb2FkX2FuZF9hcHBlbmQodXJsLCB0YWdfbmFtZSwgbG9jYXRpb24sIHVzZV9jYWNoZSkgewoJCXVybCA9IHVybC5yZXBsYWNlKC8iL2csJ1wnJyk7CgkJaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFnX25hbWUrJ1t1aWQ9IicrdXJsKyciXScpICE9PSBudWxsKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CgkJcmV0dXJuIGxvYWRfZmlsZSh1cmwsIHVzZV9jYWNoZSkudGhlbihhcHBlbmRfdG9fdGFnKTsKCgkJZnVuY3Rpb24gYXBwZW5kX3RvX3RhZyhjb250ZW50KSB7CgkJCXZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ19uYW1lKTsKCQkJdGFnLmlubmVySFRNTCA9IGNvbnRlbnQ7CgkJCXRhZy5zZXRBdHRyaWJ1dGUoJ3VpZCcsIHVybCk7CgkJCWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobG9jYXRpb24pLmFwcGVuZENoaWxkKHRhZyk7CgkJCXJldHVybiB1cmw7CgkJfQoJfQoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBMb2FkIGFuZCBpbnN0YWxsIGEgQ1NTIGZpbGUuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gbG9hZF9jc3ModXJsLCB1c2VfY2FjaGUpIHsKCQlyZXR1cm4gbG9hZF9hbmRfYXBwZW5kKHVybCwgJ3N0eWxlJywgJ2hlYWQnLCB1c2VfY2FjaGUpOwoJfQoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBMb2FkIGFuZCBpbnN0YWxsIEphdmFzY3JpcHQuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gbG9hZF9zY3JpcHQodXJsLCB1c2VfY2FjaGUpIHsKCQlyZXR1cm4gbG9hZF9hbmRfYXBwZW5kKHVybCwgJ3NjcmlwdCcsICdib2R5JywgdXNlX2NhY2hlKTsKCX0KCS8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoJdmFyIHN0YXRlX2xpc3RlbmVycyA9IHt9OwoJdmFyIHN0YXRlX3ZhbHVlcyA9IHt9OwoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBHZXQgdGhlIHZhbHVlIG9mIGEgc3RhdGUgdmFyaWFibGUsIGFuZCBub3RpZnkgbGlzdGVuZXJzLgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIGdldF9zdGF0ZShzdGF0ZV92YXIpIHsKCQlyZXR1cm4gc3RhdGVfdmFsdWVzW3N0YXRlX3Zhcl07Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFNldCB0aGUgdmFsdWUgb2YgYSBzdGF0ZSB2YXJpYWJsZSwgYW5kIG5vdGlmeSBsaXN0ZW5lcnMuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gc2V0X3N0YXRlKHN0YXRlX3ZhciwgdmFsdWUpIHsKCQl2YXIgb2xkX3ZhbHVlID0gc3RhdGVfdmFsdWVzW3N0YXRlX3Zhcl07CgkJaWYgKG9sZF92YWx1ZSA9PT0gdmFsdWUpIHJldHVybjsKCQlzdGF0ZV92YWx1ZXNbc3RhdGVfdmFyXSA9IHZhbHVlOwoKCQkvLyBEbyBsaXN0ZW5lciBjYWxsYmFja3MsIGFuZCByZW1vdmUgbm9uLXBlcnNpc3RlbnQgbGlzdGVuZXJzCgkJdmFyIGxpc3RlbmVycyA9IHN0YXRlX2xpc3RlbmVyc1tzdGF0ZV92YXJdOwoJCXZhciBwZXJzaXN0ZW50X2xpc3RlbmVycyA9IFsgXTsKCQlmb3IgKHZhciBpZHggaW4gbGlzdGVuZXJzKSB7CgkJCXZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpZHhdOwoJCQl2YXIga2VlcCA9IHRydWU7CgkJCWlmIChsaXN0ZW5lci52YWx1ZSA9PT0gdmFsdWUgfHwgbGlzdGVuZXIudmFsdWUgPT09ICcqJykgewoJCQkJa2VlcCA9IGxpc3RlbmVyLnBlcnNpc3RlbnQ7CgkJCQl0cnkgewoJCQkJCWxpc3RlbmVyLmNhbGxiYWNrKHZhbHVlLCBvbGRfdmFsdWUpOwoJCQkJfSBjYXRjaCAoZSkge30KCQkJfQoJCQlpZiAoa2VlcCkgcGVyc2lzdGVudF9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CgkJfQoJCXN0YXRlX2xpc3RlbmVyc1tzdGF0ZV92YXJdID0gcGVyc2lzdGVudF9saXN0ZW5lcnM7Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFdoZW4gc3RhdGUgb2Ygc3RhdGVfdmFyIGNoYW5nZXMgdG8gdmFsdWUsIGNhbGwgY2FsbGJhY2suCgkvLyBJZiBwZXJzaXN0ZW50ID09PSB0cnVlLCBjb250aW51ZSBsaXN0ZW5pbmcgZm9yIGFkZGl0aW9uYWwgc3RhdGUgY2hhbmdlcwoJLy8gSWYgdmFsdWUgaXMgJyonLCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBmb3IgYWxsIHN0YXRlIGNoYW5nZXMuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gd2FpdF9zdGF0ZShzdGF0ZV92YXIsIHZhbHVlLCBjYWxsYmFjaywgcGVyc2lzdGVudCkgewoJCXZhciBwcm9taXNlOwoJCWlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7CgkJCXByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKCQkJCWNhbGxiYWNrID0gcmVzb2x2ZTsKCQkJfSk7CgkJfQoJCWlmIChzdGF0ZV9saXN0ZW5lcnNbc3RhdGVfdmFyXSA9PT0gdW5kZWZpbmVkKSBzdGF0ZV9saXN0ZW5lcnNbc3RhdGVfdmFyXSA9IFsgXTsKCQlwZXJzaXN0ZW50ID0gKHBlcnNpc3RlbnQgPT09IHRydWUpOwoJCXZhciBjdXJyZW50X3ZhbHVlID0gc3RhdGVfdmFsdWVzW3N0YXRlX3Zhcl07CgkJaWYgKHBlcnNpc3RlbnQgfHwgdmFsdWUgIT09IGN1cnJlbnRfdmFsdWUpIHN0YXRlX2xpc3RlbmVyc1tzdGF0ZV92YXJdLnB1c2goe2NhbGxiYWNrOmNhbGxiYWNrLCBwZXJzaXN0ZW50OnBlcnNpc3RlbnQsIHZhbHVlOnZhbHVlfSk7CgoJCS8vIElmIGl0J3MgYWxyZWFkeSBhdCB0aGUgZGVzaXJlZCBzdGF0ZSwgY2FsbCB0aGUgY2FsbGJhY2sgaW1tZWRpYXRlbHkuCgkJaWYgKHZhbHVlID09PSBjdXJyZW50X3ZhbHVlKSB7CgkJCXRyeSB7CgkJCQljYWxsYmFjayh2YWx1ZSwgY3VycmVudF92YWx1ZSk7CgkJCX0gY2F0Y2ggKGVycikge30KCQl9CgkJcmV0dXJuIHByb21pc2U7Cgl9CgkvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCXZhciBldmVudF9saXN0ZW5lcnMgPSB7fTsKCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gRmlyZSBhbiBldmVudCwgd2hpY2ggdGhlbiBjYWxscyBjYWxsYmFja3MgZm9yIGFueSBsaXN0ZW5lcnMuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gdHJpZ2dlcl9ldmVudChldmVudCkgewoJCXZhciBsaXN0ZW5lcnMgPSBldmVudF9saXN0ZW5lcnNbZXZlbnRdOwoJCWlmIChsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuOwoJCXZhciBhcmdzID0gW107CgkJQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJncyxhcmd1bWVudHMpOwoJCWFyZ3Muc2hpZnQoKTsKCQlmb3IgKHZhciBpZHggaW4gbGlzdGVuZXJzKSB0cnkgewoJCQlsaXN0ZW5lcnNbaWR4XS5hcHBseShudWxsLGFyZ3MpOwoJCX0gY2F0Y2ggKGVycikge30KCQlyZXR1cm4gZ2xvYmFsLndrb2Y7Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIEFkZCBhIGxpc3RlbmVyIGZvciBhbiBldmVudC4KCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCglmdW5jdGlvbiB3YWl0X2V2ZW50KGV2ZW50LCBjYWxsYmFjaykgewoJCWlmIChldmVudF9saXN0ZW5lcnNbZXZlbnRdID09PSB1bmRlZmluZWQpIGV2ZW50X2xpc3RlbmVyc1tldmVudF0gPSBbXTsKCQlldmVudF9saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spOwoJCXJldHVybiBnbG9iYWwud2tvZjsKCX0KCS8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoJdmFyIGZpbGVfY2FjaGVfb3Blbl9wcm9taXNlOwoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBPcGVuIHRoZSBmaWxlX2NhY2hlIGRhdGFiYXNlIChvciByZXR1cm4gaGFuZGxlIGlmIG9wZW4pLgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIGZpbGVfY2FjaGVfb3BlbigpIHsKCQlpZiAoZmlsZV9jYWNoZV9vcGVuX3Byb21pc2UpIHJldHVybiBmaWxlX2NhY2hlX29wZW5fcHJvbWlzZTsKCQl2YXIgb3Blbl9wcm9taXNlID0gcHJvbWlzZSgpOwoJCWZpbGVfY2FjaGVfb3Blbl9wcm9taXNlID0gb3Blbl9wcm9taXNlOwoJCXZhciByZXF1ZXN0OwoJCXJlcXVlc3QgPSBpbmRleGVkREIub3Blbignd2tvZi5maWxlX2NhY2hlJyk7CgkJcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSB1cGdyYWRlX2RiOwoJCXJlcXVlc3Qub25zdWNjZXNzID0gZ2V0X2RpcjsKCQlyZXF1ZXN0Lm9uZXJyb3IgPSBlcnJvcjsKCQlyZXR1cm4gb3Blbl9wcm9taXNlOwoKCQlmdW5jdGlvbiBlcnJvcigpIHsKCQkJY29uc29sZS5sb2coJ2luZGV4ZWREQiBjb3VsZCBub3Qgb3BlbiEnKTsKCQkJd2tvZi5maWxlX2NhY2hlLmRpciA9IHt9OwoJCQlpZiAoaWdub3JlX21pc3NpbmdfaW5kZXhlZGRiKSB7CgkJCQlvcGVuX3Byb21pc2UucmVzb2x2ZShudWxsKTsKCQkJfSBlbHNlIHsKCQkJCW9wZW5fcHJvbWlzZS5yZWplY3QoKTsKCQkJfQoJCX0KCgkJZnVuY3Rpb24gdXBncmFkZV9kYihldmVudCl7CgkJCXZhciBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7CgkJCXZhciBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdmaWxlcycsIHtrZXlQYXRoOiduYW1lJ30pOwoJCX0KCgkJZnVuY3Rpb24gZ2V0X2RpcihldmVudCl7CgkJCXZhciBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7CgkJCXZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdmaWxlcycsICdyZWFkb25seScpOwoJCQl2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnZmlsZXMnKTsKCQkJdmFyIHJlcXVlc3QgPSBzdG9yZS5nZXQoJ1tkaXJdJyk7CgkJCXJlcXVlc3Qub25zdWNjZXNzID0gcHJvY2Vzc19kaXI7CgkJCXRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBvcGVuX3Byb21pc2UucmVzb2x2ZS5iaW5kKG51bGwsIGRiKTsKCQkJb3Blbl9wcm9taXNlLnRoZW4oc2V0VGltZW91dC5iaW5kKG51bGwsIGZpbGVfY2FjaGVfY2xlYW51cCwgMTAwMDApKTsKCQl9CgoJCWZ1bmN0aW9uIHByb2Nlc3NfZGlyKGV2ZW50KXsKCQkJaWYgKGV2ZW50LnRhcmdldC5yZXN1bHQgPT09IHVuZGVmaW5lZCkgewoJCQkJd2tvZi5maWxlX2NhY2hlLmRpciA9IHt9OwoJCQl9IGVsc2UgewoJCQkJd2tvZi5maWxlX2NhY2hlLmRpciA9IEpTT04ucGFyc2UoZXZlbnQudGFyZ2V0LnJlc3VsdC5jb250ZW50KTsKCQkJfQoJCX0KCX0KCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gTGlzdHMgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGVfY2FjaGUuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gZmlsZV9jYWNoZV9saXN0KCkgewoJCWNvbnNvbGUubG9nKE9iamVjdC5rZXlzKHdrb2YuZmlsZV9jYWNoZS5kaXIpLnNvcnQoKS5qb2luKCdcbicpKTsKCX0KCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gQ2xlYXIgdGhlIGZpbGVfY2FjaGUgZGF0YWJhc2UuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gZmlsZV9jYWNoZV9jbGVhcigpIHsKCQlyZXR1cm4gZmlsZV9jYWNoZV9vcGVuKCkudGhlbihjbGVhcik7CgoJCWZ1bmN0aW9uIGNsZWFyKGRiKSB7CgkJCXZhciBjbGVhcl9wcm9taXNlID0gcHJvbWlzZSgpOwoJCQl3a29mLmZpbGVfY2FjaGUuZGlyID0ge307CgkJCWlmIChkYiA9PT0gbnVsbCkgcmV0dXJuIGNsZWFyX3Byb21pc2UucmVzb2x2ZSgpOwoJCQl2YXIgdHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbignZmlsZXMnLCAncmVhZHdyaXRlJyk7CgkJCXZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdmaWxlcycpOwoJCQlzdG9yZS5jbGVhcigpOwoJCQl0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gY2xlYXJfcHJvbWlzZS5yZXNvbHZlOwoJCX0KCX0KCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gRGVsZXRlIGEgZmlsZSBmcm9tIHRoZSBmaWxlX2NhY2hlIGRhdGFiYXNlLgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIGZpbGVfY2FjaGVfZGVsZXRlKHBhdHRlcm4pIHsKCQlyZXR1cm4gZmlsZV9jYWNoZV9vcGVuKCkudGhlbihkZWwpOwoKCQlmdW5jdGlvbiBkZWwoZGIpIHsKCQkJdmFyIGRlbF9wcm9taXNlID0gcHJvbWlzZSgpOwoJCQlpZiAoZGIgPT09IG51bGwpIHJldHVybiBkZWxfcHJvbWlzZS5yZXNvbHZlKCk7CgkJCXZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdmaWxlcycsICdyZWFkd3JpdGUnKTsKCQkJdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2ZpbGVzJyk7CgkJCXZhciBmaWxlcyA9IE9iamVjdC5rZXlzKHdrb2YuZmlsZV9jYWNoZS5kaXIpLmZpbHRlcihmdW5jdGlvbihmaWxlKXsKCQkJCWlmIChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7CgkJCQkJcmV0dXJuIGZpbGUubWF0Y2gocGF0dGVybikgIT09IG51bGw7CgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiAoZmlsZSA9PT0gcGF0dGVybik7CgkJCQl9CgkJCX0pOwoJCQlmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpewoJCQkJc3RvcmUuZGVsZXRlKGZpbGUpOwoJCQkJZGVsZXRlIHdrb2YuZmlsZV9jYWNoZS5kaXJbZmlsZV07CgkJCX0pOwoJCQlmaWxlX2NhY2hlX2Rpcl9zYXZlKCk7CgkJCXRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBkZWxfcHJvbWlzZS5yZXNvbHZlLmJpbmQobnVsbCwgZmlsZXMpOwoJCQlyZXR1cm4gZGVsX3Byb21pc2U7CgkJfQoJfQoKCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyBGb3JjZSBpbW1lZGlhdGUgc2F2ZSBvZiBmaWxlX2NhY2hlIGRpcmVjdG9yeS4KCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCglmdW5jdGlvbiBmaWxlX2NhY2hlX2ZsdXNoKCkgewoJCWZpbGVfY2FjaGVfZGlyX3NhdmUodHJ1ZSAvKiBpbW1lZGlhdGVseSAqLyk7Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIExvYWQgYSBmaWxlIGZyb20gdGhlIGZpbGVfY2FjaGUgZGF0YWJhc2UuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gZmlsZV9jYWNoZV9sb2FkKG5hbWUpIHsKCQl2YXIgbG9hZF9wcm9taXNlID0gcHJvbWlzZSgpOwoJCXJldHVybiBmaWxlX2NhY2hlX29wZW4oKS50aGVuKGxvYWQpOwoKCQlmdW5jdGlvbiBsb2FkKGRiKSB7CgkJCWlmICh3a29mLmZpbGVfY2FjaGUuZGlyW25hbWVdID09PSB1bmRlZmluZWQpIHsKCQkJCWxvYWRfcHJvbWlzZS5yZWplY3QobmFtZSk7CgkJCQlyZXR1cm4gbG9hZF9wcm9taXNlOwoJCQl9CgkJCXZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdmaWxlcycsICdyZWFkb25seScpOwoJCQl2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnZmlsZXMnKTsKCQkJdmFyIHJlcXVlc3QgPSBzdG9yZS5nZXQobmFtZSk7CgkJCXdrb2YuZmlsZV9jYWNoZS5kaXJbbmFtZV0ubGFzdF9sb2FkZWQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7CgkJCWZpbGVfY2FjaGVfZGlyX3NhdmUoKTsKCQkJcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmaW5pc2g7CgkJCXJlcXVlc3Qub25lcnJvciA9IGVycm9yOwoJCQlyZXR1cm4gbG9hZF9wcm9taXNlOwoKCQkJZnVuY3Rpb24gZmluaXNoKGV2ZW50KXsKCQkJCWlmIChldmVudC50YXJnZXQucmVzdWx0ID09PSB1bmRlZmluZWQgfHwgZXZlbnQudGFyZ2V0LnJlc3VsdCA9PT0gbnVsbCkgewoJCQkJCWxvYWRfcHJvbWlzZS5yZWplY3QobmFtZSk7CgkJCQl9IGVsc2UgewoJCQkJCWxvYWRfcHJvbWlzZS5yZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQuY29udGVudCk7CgkJCQl9CgkJCX0KCgkJCWZ1bmN0aW9uIGVycm9yKGV2ZW50KXsKCQkJCWxvYWRfcHJvbWlzZS5yZWplY3QobmFtZSk7CgkJCX0KCQl9Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFNhdmUgYSBmaWxlIGludG8gdGhlIGZpbGVfY2FjaGUgZGF0YWJhc2UuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gZmlsZV9jYWNoZV9zYXZlKG5hbWUsIGNvbnRlbnQsIGV4dHJhX2F0dHJpYnMpIHsKCQlyZXR1cm4gZmlsZV9jYWNoZV9vcGVuKCkudGhlbihzYXZlKTsKCgkJZnVuY3Rpb24gc2F2ZShkYikgewoJCQl2YXIgc2F2ZV9wcm9taXNlID0gcHJvbWlzZSgpOwoJCQlpZiAoZGIgPT09IG51bGwpIHJldHVybiBzYXZlX3Byb21pc2UucmVzb2x2ZShuYW1lKTsKCQkJdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oJ2ZpbGVzJywgJ3JlYWR3cml0ZScpOwoJCQl2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnZmlsZXMnKTsKCQkJc3RvcmUucHV0KHtuYW1lOm5hbWUsY29udGVudDpjb250ZW50fSk7CgkJCXZhciBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7CgkJCXdrb2YuZmlsZV9jYWNoZS5kaXJbbmFtZV0gPSBPYmplY3QuYXNzaWduKHthZGRlZDpub3csIGxhc3RfbG9hZGVkOm5vd30sIGV4dHJhX2F0dHJpYnMpOwoJCQlmaWxlX2NhY2hlX2Rpcl9zYXZlKHRydWUgLyogaW1tZWRpYXRlbHkgKi8pOwoJCQl0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gc2F2ZV9wcm9taXNlLnJlc29sdmUuYmluZChudWxsLCBuYW1lKTsKCQl9Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFNhdmUgYSB0aGUgZmlsZV9jYWNoZSBkaXJlY3RvcnkgY29udGVudHMuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJdmFyIGZjX3N5bmNfdGltZXI7CglmdW5jdGlvbiBmaWxlX2NhY2hlX2Rpcl9zYXZlKGltbWVkaWF0ZWx5KSB7CgkJaWYgKGZjX3N5bmNfdGltZXIgIT09IHVuZGVmaW5lZCkgY2xlYXJUaW1lb3V0KGZjX3N5bmNfdGltZXIpOwoJCXZhciBkZWxheSA9IChpbW1lZGlhdGVseSA/IDAgOiAyMDAwKTsKCQlmY19zeW5jX3RpbWVyID0gc2V0VGltZW91dChzYXZlLCBkZWxheSk7CgoJCWZ1bmN0aW9uIHNhdmUoKXsKCQkJZmlsZV9jYWNoZV9vcGVuKCkudGhlbihzYXZlMik7CgkJfQoKCQlmdW5jdGlvbiBzYXZlMihkYil7CgkJCWZjX3N5bmNfdGltZXIgPSB1bmRlZmluZWQ7CgkJCXZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdmaWxlcycsICdyZWFkd3JpdGUnKTsKCQkJdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2ZpbGVzJyk7CgkJCXN0b3JlLnB1dCh7bmFtZTonW2Rpcl0nLGNvbnRlbnQ6SlNPTi5zdHJpbmdpZnkod2tvZi5maWxlX2NhY2hlLmRpcil9KTsKCQl9Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFJlbW92ZSBmaWxlcyB0aGF0IGhhdmVuJ3QgYmVlbiBhY2Nlc3NlZCBpbiBhIHdoaWxlLgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIGZpbGVfY2FjaGVfY2xlYW51cCgpIHsKCQl2YXIgdGhyZXNob2xkID0gbmV3IERhdGUoKSAtIDE0Kjg2NDAwMDAwOyAvLyAxNCBkYXlzCgkJdmFyIG9sZF9maWxlcyA9IFtdOwoJCWZvciAodmFyIGZuYW1lIGluIHdrb2YuZmlsZV9jYWNoZS5kaXIpIHsKCQkJaWYgKGZuYW1lLm1hdGNoKC9ed2tvZlwuc2V0dGluZ3NcLi8pKSBjb250aW51ZTsgLy8gRG9uJ3QgZmx1c2ggc2V0dGluZ3MgZmlsZXMuCgkJCXZhciBmZGF0ZSA9IG5ldyBEYXRlKHdrb2YuZmlsZV9jYWNoZS5kaXJbZm5hbWVdLmxhc3RfbG9hZGVkKTsKCQkJaWYgKGZkYXRlIDwgdGhyZXNob2xkKSBvbGRfZmlsZXMucHVzaChmbmFtZSk7CgkJfQoJCWlmIChvbGRfZmlsZXMubGVuZ3RoID09PSAwKSByZXR1cm47CgkJY29uc29sZS5sb2coJ0NsZWFuaW5nIG91dCAnK29sZF9maWxlcy5sZW5ndGgrJyBvbGQgZmlsZShzKSBmcm9tICJ3a29mLmZpbGVfY2FjaGUiOicpOwoJCWZvciAodmFyIGZudW0gaW4gb2xkX2ZpbGVzKSB7CgkJCWNvbnNvbGUubG9nKCcgICcrKE51bWJlcihmbnVtKSsxKSsnOiAnK29sZF9maWxlc1tmbnVtXSk7CgkJCXdrb2YuZmlsZV9jYWNoZS5kZWxldGUob2xkX2ZpbGVzW2ZudW1dKTsKCQl9Cgl9CgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFByb2Nlc3Mgbm8tY2FjaGUgcmVxdWVzdHMuCgkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJZnVuY3Rpb24gZmlsZV9ub2NhY2hlKGxpc3QpIHsKCQlpZiAobGlzdCA9PT0gdW5kZWZpbmVkKSB7CgkJCWxpc3QgPSBzcGxpdF9saXN0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd3a29mLmluY2x1ZGUubm9jYWNoZScpIHx8ICcnKTsKCQkJbGlzdCA9IGxpc3QuY29uY2F0KHNwbGl0X2xpc3QobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3drb2YubG9hZF9maWxlLm5vY2FjaGUnKSB8fCAnJykpOwoJCQljb25zb2xlLmxvZyhsaXN0LmpvaW4oJywnKSk7CgkJfSBlbHNlIGlmICh0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycpIHsKCQkJdmFyIG5vX2NhY2hlID0gc3BsaXRfbGlzdChsaXN0KTsKCQkJdmFyIGlkeCwgbW9kdWxlcyA9IFtdLCB1cmxzID0gW107CgkJCWZvciAoaWR4ID0gMDsgaWR4IDwgbm9fY2FjaGUubGVuZ3RoOyBpZHgrKykgewoJCQkJdmFyIGl0ZW0gPSBub19jYWNoZVtpZHhdOwoJCQkJaWYgKHN1cHBvcnRlZF9tb2R1bGVzW2l0ZW1dICE9PSB1bmRlZmluZWQpIHsKCQkJCQltb2R1bGVzLnB1c2goaXRlbSk7CgkJCQl9IGVsc2UgewoJCQkJCXVybHMucHVzaChpdGVtKTsKCQkJCX0KCQkJfQoJCQljb25zb2xlLmxvZygnTW9kdWxlczogJyttb2R1bGVzLmpvaW4oJywnKSk7CgkJCWNvbnNvbGUubG9nKCcgICBVUkxzOiAnK3VybHMuam9pbignLCcpKTsKCQkJbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3drb2YuaW5jbHVkZS5ub2NhY2hlJywgbW9kdWxlcy5qb2luKCcsJykpOwoJCQlsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd2tvZi5sb2FkX2ZpbGUubm9jYWNoZScsIHVybHMuam9pbignLCcpKTsKCQl9Cgl9CgoJZnVuY3Rpb24gZG9jX3JlYWR5KCkgewoJCXdrb2Yuc2V0X3N0YXRlKCd3a29mLmRvY3VtZW50JywgJ3JlYWR5Jyk7Cgl9CgoJLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCS8vIEJvb3Rsb2FkZXIgU3RhcnR1cAoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCWZ1bmN0aW9uIHN0YXJ0dXAoKSB7CgkJZ2xvYmFsLndrb2YgPSBwdWJsaXNoZWRfaW50ZXJmYWNlOwoKCQkvLyBNYXJrIGRvY3VtZW50IHN0YXRlIGFzICdyZWFkeScuCgkJaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHsKCQkJZG9jX3JlYWR5KCk7CgkJfSBlbHNlIHsKCQkJd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCBkb2NfcmVhZHksIGZhbHNlKTsgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgdGhhdCB3ZSBhcmUgcmVhZHkuCgkJfQoKCQkvLyBPcGVuIGNhY2hlLCBzbyB3a29mLmZpbGVfY2FjaGUuZGlyIGlzIGF2YWlsYWJsZSB0byBjb25zb2xlIGltbWVkaWF0ZWx5LgoJCWZpbGVfY2FjaGVfb3BlbigpOwoJCXdrb2Yuc2V0X3N0YXRlKCd3a29mLndrb2YnLCAncmVhZHknKTsKCX0KCXN0YXJ0dXAoKTsKCn0pKHdpbmRvdyk7Cg==",
            "storage": {
                "data": {},
                "ts": 1607436649580
            },
            "uuid": "e6f9fcca-44eb-425c-b066-541eb962863d"
        },
        {
            "enabled": false,
            "file_url": "https://userscripts-mirror.org/scripts/source/174135.user.js",
            "name": "WaniKani Improve",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://www.wanikani.com/review/session",
                        "http://www.wanikani.com/review/session"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-end",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 2,
            "requires": [],
            "resources": [],
            "source": "",
            "storage": {
                "data": {},
                "ts": 1607436649591
            },
            "uuid": "38820d1c-0915-49b6-a73f-2b2d2f9cfbd9"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/23696-wanikani-override/code/Wanikani%20Override.user.js",
            "name": "Wanikani Override",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [
                        "http://www.wanikani.com/review/session*",
                        "https://www.wanikani.com/review/session*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 3,
            "requires": [],
            "source": "",
            "storage": {
                "data": {},
                "ts": 1607436649612
            },
            "uuid": "7da2a58d-d2aa-4e58-81fd-d5c8b940fca5"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/13475-wanikani-ultimate-timeline/code/Wanikani%20Ultimate%20Timeline.user.js",
            "name": "Wanikani Ultimate Timeline",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [
                        "/^https://(www|preview).wanikani.com/(dashboard)?$/"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-end",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 4,
            "source": "",
            "storage": {
                "data": {},
                "ts": 1607436649623
            },
            "uuid": "898d914c-c6aa-4606-abf9-fcc0e7385841"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/723-wanikani-stroke-order/code/WaniKani%20Stroke%20Order.user.js",
            "name": "WaniKani Stroke Order",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [
                        "http*://*wanikani.com/kanji/*",
                        "http*://*wanikani.com/level/*/kanji/*",
                        "http*://*wanikani.com/review/session",
                        "http*://*wanikani.com/lesson/session"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [
                        "jisho.org"
                    ],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 5,
            "requires": [],
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFdhbmlLYW5pIFN0cm9rZSBPcmRlcgovLyBAbmFtZXNwYWNlICAgamFwYW5lc2UKLy8gQGRlc2NyaXB0aW9uIFNob3dzIGEga2FuamkncyBzdHJva2Ugb3JkZXIgb24gaXRzIHBhZ2UgYW5kIGR1cmluZyBsZXNzb25zIGFuZCByZXZpZXdzLgovLyBAbGljZW5zZSAgICAgR1BMIHZlcnNpb24gMyBvciBhbnkgbGF0ZXIgdmVyc2lvbjsgaHR0cDovL3d3dy5nbnUub3JnL2NvcHlsZWZ0L2dwbC5odG1sCi8vIEBpbmNsdWRlICAgICBodHRwKjovLyp3YW5pa2FuaS5jb20va2FuamkvKgovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly8qd2FuaWthbmkuY29tL2xldmVsLyova2FuamkvKgovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly8qd2FuaWthbmkuY29tL3Jldmlldy9zZXNzaW9uCi8vIEBpbmNsdWRlICAgICBodHRwKjovLyp3YW5pa2FuaS5jb20vbGVzc29uL3Nlc3Npb24KLy8gQHZlcnNpb24gICAgIDEuMS4yCi8vIEBncmFudCAgICAgICBHTV94bWxodHRwUmVxdWVzdAovLyBAcmVxdWlyZSAgICAgaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjEwLjIvanF1ZXJ5Lm1pbi5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KCi8qCiAqIFRoYW5rcyBhIGxvdCB0byAuLi4KICogV2FuaWthbmkgUGhvbmV0aWMtU2VtYW50aWMgQ29tcG9zaXRpb24gLSBVc2Vyc2NyaXB0CiAqIGJ5IHJ1aXBncGluaGVpcm8gKExvcmRHcmF2ZXdpc2gpCiAqIC4uLiBmb3IgY29kZSBzaG93aW5nIG1lIGhvdyB0byBpbnNlcnQgc2VjdGlvbnMgZHVyaW5nIGthbmppIHJldmlld3MuCiAqIFRoZSBjb2RlIGhlYXZpbHkgYm9ycm93cyBmcm9tIHRoYXQgc2NyaXB0IQogKiBBbHNvIHRoYW5rcyB0byBIYWxvIGZvciBhIGxvYWRpbmcgYnVnIGZpeCEKICovCgovKgogKiBIZWxwZXIgRnVuY3Rpb25zL1ZhcmlhYmxlcwogKi8KJCA9IHVuc2FmZVdpbmRvdy4kOwoKLyoKICogR2xvYmFsIFZhcmlhYmxlcy9PYmplY3RzL0NsYXNzZXMKICovCnZhciBQYWdlRW51bSA9IE9iamVjdC5mcmVlemUoeyB1bmtub3duOjAsIGthbmppOjEsIHJldmlld3M6MiwgbGVzc29uczozIH0pOwp2YXIgY3VyUGFnZSA9IFBhZ2VFbnVtLnVua25vd247CnZhciBKSVNITyA9ICJodHRwOi8vY2xhc3NpYy5qaXNoby5vcmciOwoKLyoKICogTWFpbgogKi8KZnVuY3Rpb24gaW5pdCgpIHsKICAgIC8vIERldGVybWluZSBwYWdlIHR5cGUKICAgIGlmICgvXC9rYW5qaVwvLi8udGVzdChkb2N1bWVudC5VUkwpKSB7CiAgICAgICAgY3VyUGFnZSA9IFBhZ2VFbnVtLmthbmppOwogICAgfSBlbHNlIGlmICgvXC9yZXZpZXcvLnRlc3QoZG9jdW1lbnQuVVJMKSkgewogICAgICAgIGN1clBhZ2UgPSBQYWdlRW51bS5yZXZpZXdzOwogICAgfSBlbHNlIGlmICgvXC9sZXNzb24vLnRlc3QoZG9jdW1lbnQuVVJMKSkgewogICAgICAgIGN1clBhZ2UgPSBQYWdlRW51bS5sZXNzb25zOwogICAgfQoKICAgIC8vIENyZWF0ZSBhbmQgc3RvcmUgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGhvbGQgdGhlIGltYWdlCiAgICB1bnNhZmVXaW5kb3cuZGlhZ3JhbSA9IGNyZWF0ZURpYWdyYW1TZWN0aW9uKCk7CgogICAgLy8gUmVnaXN0ZXIgY2FsbGJhY2sgZm9yIHdoZW4gdG8gbG9hZCBzdHJva2Ugb3JkZXIKICAgIHN3aXRjaCAoY3VyUGFnZSkgewogICAgICAgIGNhc2UgUGFnZUVudW0ua2Fuamk6CiAgICAgICAgICAgIGxvYWREaWFncmFtKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgUGFnZUVudW0ucmV2aWV3czoKICAgICAgICAgICAgdmFyIG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHsKICAgICAgICAgICAgICAgLy8gVGhlIGxhc3Qgb25lIGFsd2F5cyBoYXMgMiBtdXRhdGlvbnMsIHNvIGxldCdzIHVzZSB0aGF0CiAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoICE9IDIpCiAgICAgICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICAgICAvLyBSZXZpZXdzIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBET00uIFdlIGFsd2F5cyBuZWVkIHRvIHJlLWluc2VydCB0aGUgZWxlbWVudAogICAgICAgICAgICAgICBpZiAoZ2V0S2FuamkoKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgIHZhciBkaWFncmFtID0gY3JlYXRlRGlhZ3JhbVNlY3Rpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlhZ3JhbSAhPT0gbnVsbCAmJiBkaWFncmFtLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYWZlV2luZG93LmRpYWdyYW0gPSBkaWFncmFtOwogICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkRGlhZ3JhbSgpOwogICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgIH0sIDE1MCk7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG8ub2JzZXJ2ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXRlbS1pbmZvJyksIHsnYXR0cmlidXRlcycgOiB0cnVlfSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgUGFnZUVudW0ubGVzc29uczoKICAgICAgICAgICAgdmFyIG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsb2FkRGlhZ3JhbSk7CiAgICAgICAgICAgIG8ub2JzZXJ2ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VwcGxlbWVudC1rYW4nKSwgeydhdHRyaWJ1dGVzJyA6IHRydWV9KTsKICAgICAgICAgICAgbG9hZERpYWdyYW0oKTsKICAgICAgICAgICAgYnJlYWs7CiAgICB9Cn0KCmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7CiAgICBpbml0KCk7Cn0gZWxzZSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaXQpOwp9CgovKgogKiBSZXR1cm5zIHRoZSBjdXJyZW50IGthbmppCiAqLwpmdW5jdGlvbiBnZXRLYW5qaSgpIHsKICAgIHN3aXRjaChjdXJQYWdlKSB7CiAgICAgICAgY2FzZSBQYWdlRW51bS5rYW5qaToKICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnRpdGxlW2RvY3VtZW50LnRpdGxlLmxlbmd0aCAtIDFdOwoKICAgICAgICBjYXNlIFBhZ2VFbnVtLnJldmlld3M6CiAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJC5qU3RvcmFnZS5nZXQoImN1cnJlbnRJdGVtIik7CiAgICAgICAgICAgIGlmKCJrYW4iIGluIGN1ckl0ZW0pCiAgICAgICAgICAgICAgICByZXR1cm4gY3VySXRlbS5rYW4udHJpbSgpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKCiAgICAgICAgY2FzZSBQYWdlRW51bS5sZXNzb25zOgogICAgICAgICAgICB2YXIga2FuamlOb2RlID0gJCgiI2NoYXJhY3RlciIpOwoKICAgICAgICAgICAgaWYoa2FuamlOb2RlID09PSB1bmRlZmluZWQgfHwga2FuamlOb2RlID09PSBudWxsKQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CgogICAgICAgICAgICByZXR1cm4ga2FuamlOb2RlLnRleHQoKS50cmltKCk7CiAgICB9CgogICAgcmV0dXJuIG51bGw7Cn0KCi8qCiAqIENyZWF0ZXMgYSBzZWN0aW9uIGZvciB0aGUgZGlhZ3JhbSBhbmQgcmV0dXJucyBhIHBvaW50ZXIgdG8gaXRzIGNvbnRlbnQKICovCmZ1bmN0aW9uIGNyZWF0ZURpYWdyYW1TZWN0aW9uKCkgewoKICAgIC8vIFJldmlld3MgaGFjazogT25seSBkbyBpdCBvbmNlCiAgICBpZiAoJCgnI3N0cm9rZV9vcmRlcicpLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgdmFyIHNlY3Rpb25IVE1MID0gJzxzZWN0aW9uPjxoMj5TdHJva2UgT3JkZXI8L2gyPjxwIGlkPSJzdHJva2Vfb3JkZXIiPiZuYnNwOzwvcD48L3NlY3Rpb24+JzsKCiAgICAgICAgc3dpdGNoKGN1clBhZ2UpIHsKICAgICAgICAgICAgY2FzZSBQYWdlRW51bS5rYW5qaToKICAgICAgICAgICAgICAgICQoc2VjdGlvbkhUTUwpLmluc2VydEFmdGVyKCcjaW5mb3JtYXRpb24nKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFBhZ2VFbnVtLnJldmlld3M6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicHJlcGVuZCIpOwogICAgICAgICAgICAgICAgJCgnI2l0ZW0taW5mby1jb2wyJykucHJlcGVuZChzZWN0aW9uSFRNTCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBQYWdlRW51bS5sZXNzb25zOgogICAgICAgICAgICAgICAgJCgnI3N1cHBsZW1lbnQta2FuLWJyZWFrZG93biAuY29sMScpLmFwcGVuZChzZWN0aW9uSFRNTCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuICQoJyNzdHJva2Vfb3JkZXInKTsKfQoKLyoKICogQWRkcyB0aGUgZGlhZ3JhbSBzZWN0aW9uIGVsZW1lbnQgdG8gdGhlIGFwcHJvcHJpYXRlIGxvY2F0aW9uCiAqLwpmdW5jdGlvbiBsb2FkRGlhZ3JhbSgpIHsKCiAgICBpZiAoIXVuc2FmZVdpbmRvdyB8fCAhdW5zYWZlV2luZG93LmRpYWdyYW0ubGVuZ3RoKQogICAgICAgIHJldHVybjsKCiAgICB1bnNhZmVXaW5kb3cuZGlhZ3JhbS5odG1sKCJMb2FkaW5nLi4uIik7CgogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgIHVybDogSklTSE8gKyAiL2thbmppL2RldGFpbHMvIiArIGdldEthbmppKCksCiAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICB2YXIgZGlhZ3JhbSA9IHVuc2FmZVdpbmRvdy5kaWFncmFtOwogICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRpYWdyYW1VUkwgPSB4aHIucmVzcG9uc2VUZXh0Lm1hdGNoKC9cL3N0YXRpY1wvaW1hZ2VzXC9zdHJva2VfZGlhZ3JhbXNcL1swLTldK19mcmFtZXNcLnBuZy8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWdyYW0uaHRtbCgnPGltZyBzcmM9IicgKyBKSVNITyArIGRpYWdyYW1VUkxbMF0gKyAnIiBhbHQ9IlN0cm9rZSBvcmRlciBkaWFncmFtIiAvPicpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5kaWFncmFtLmh0bWwoIkVycm9yIHdoaWxlIGxvYWRpbmcgZGlhZ3JhbSIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbmVycm9yOiBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5kaWFncmFtLmh0bWwoIkVycm9yIHdoaWxlIGxvYWRpbmcgZGlhZ3JhbSIpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LCAwKTsKfQ==",
            "storage": {
                "data": {},
                "ts": 1607436649628
            },
            "uuid": "648066f1-2454-460b-9217-49d3d4376da9"
        },
        {
            "enabled": true,
            "file_url": "https://openuserjs.org/install/laidbacktempo/Google_View_Image.user.js",
            "name": "Google View Image",
            "options": {
                "check_for_updates": false,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": false,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "https://**/*",
                        "http://**/*"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": [
                        "https://www.google.com/**"
                    ]
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 6,
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHb29nbGUgVmlldyBJbWFnZQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9Hb29nbGVWaWV3SW1hZ2UuY29tLwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIEJyaW5nIGJhY2sgR29vZ2xlIFZpZXcgSW1hZ2UhCi8vIEBhdXRob3IgICAgICAgbGFpZGJhY2tUZW1wbwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vKiovKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly8qKi8qCi8vIEBsaWNlbnNlIE1JVAovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgpmdW5jdGlvbiB0b0kxOG4oc3RyKSB7CiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL19fTVNHXyhcdyspX18vZywgZnVuY3Rpb24gKG1hdGNoLCB2MSkgewogICAgICAgIHJldHVybiB2MSA/IGNocm9tZS5pMThuLmdldE1lc3NhZ2UodjEpIDogJyc7CiAgICB9KTsKfQoKZnVuY3Rpb24gbG9jYWxpc2VPYmplY3Qob2JqLCB0YWcpIHsKICAgIG9iai5pbm5lckhUTUwgPSB0YWc7CiAgICByZXR1cm47CiAgICAvL3ZhciBtc2cgPSB0b0kxOG4odGFnKTsKICAgIC8vaWYgKG1zZyAhPSB0YWcpIG9iai5pbm5lckhUTUwgPSBtc2c7Cn0KCmZ1bmN0aW9uIGFkZExpbmtzKG5vZGUpIHsKICAgIC8vIGNvbnNvbGUubG9nKCJBZGRpbmcgbGluayIpOwogICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJBZGRpbmcgbGluayBpbiIpOwogICAgICAgIGlmICgobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2lyY19yaXMnKSkgfHwgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcmNfbWknKSB8fCAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2lyY190YXMnKSkpKSB7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiQWRkaW5nIGxpbmsgT0sgT0sgIik7CiAgICAgICAgICAgIHZhciBvYmplY3QgPSBub2RlLmNsb3Nlc3QoJy5pcmNfYycpOwogICAgICAgICAgICAvLyBSZXRyaXZlIGltYWdlIGxpbmtzLCBhbmQgaW1hZ2UgdXJsCiAgICAgICAgICAgIHZhciBpbWFnZUxpbmtzID0gb2JqZWN0LnF1ZXJ5U2VsZWN0b3IoJy5fRkt3LmlyY19idXRfciA+IHRib2R5ID4gdHInKTsKICAgICAgICAgICAgdmFyIGltYWdlVGV4dCA9IG9iamVjdC5xdWVyeVNlbGVjdG9yKCcuX2NqaiA+IC5pcmNfaXQgPiAuaXJjX2hkID4gLl9yMycpOwoKICAgICAgICAgICAgLy8gUmV0cml2ZSB0aGUgaW1hZ2UgVVJMCiAgICAgICAgICAgIHZhciBpbWFnZVVSTDsKCiAgICAgICAgICAgIHZhciB0aHVtYm5haWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbWdbbmFtZT0iJyArIG9iamVjdC5kYXRhc2V0Lml0ZW1JZCArICciXScpOwogICAgICAgICAgICBpZiAodGh1bWJuYWlsKSB7CiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IHRodW1ibmFpbC5jbG9zZXN0KCcucmdfYngnKS5xdWVyeVNlbGVjdG9yKCcucmdfbWV0YScpOwogICAgICAgICAgICAgICAgdmFyIG1ldGFkYXRhID0gSlNPTi5wYXJzZShtZXRhLmlubmVySFRNTCk7CiAgICAgICAgICAgICAgICBpbWFnZVVSTCA9IG1ldGFkYXRhLm91OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaW1hZ2VVUkwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpcmNfbWknKVswXS5zcmM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFJlbW92ZSBwcmV2aW91c2x5IGdlbmVyYXRlZCB2aWV3IGltYWdlIGJ1dHRvbnMKICAgICAgICAgICAgdmFyIG9sZFZpZXdJbWFnZSA9IGltYWdlTGlua3MucXVlcnlTZWxlY3RvcignLmV4dF9hZGRvbicpOwogICAgICAgICAgICBpZiAob2xkVmlld0ltYWdlKSB7CiAgICAgICAgICAgICAgICBpbWFnZUxpbmtzLnJlbW92ZUNoaWxkKG9sZFZpZXdJbWFnZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHJlbW92ZSBwcmV2aW91c2x5IGdlbmVyYXRlZCBzZWFyY2ggYnkgaW1hZ2UgbGlua3MKICAgICAgICAgICAgdmFyIG9sZFNlYXJjaEJ5SW1hZ2UgPSBpbWFnZVRleHQucXVlcnlTZWxlY3RvcignLmV4dF9hZGRvbicpOwogICAgICAgICAgICBpZiAob2xkU2VhcmNoQnlJbWFnZSkgewogICAgICAgICAgICAgICAgaW1hZ2VUZXh0LnJlbW92ZUNoaWxkKG9sZFNlYXJjaEJ5SW1hZ2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDcmVhdGUgU2VhcmNoIGJ5IGltYWdlIGJ1dHRvbgogICAgICAgICAgICB2YXIgc2VhcmNoQnlJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgc2VhcmNoQnlJbWFnZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnL3NlYXJjaGJ5aW1hZ2U/JmltYWdlX3VybD0nICsgaW1hZ2VVUkwpOwogICAgICAgICAgICBzZWFyY2hCeUltYWdlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZXh0X2FkZG9uJyk7CiAgICAgICAgICAgIHNlYXJjaEJ5SW1hZ2Uuc2V0QXR0cmlidXRlKCdzdHlsZScsICdtYXJnaW4tbGVmdDo0cHQ7Jyk7CgogICAgICAgICAgICAvLyBJbnNlcnQgdGV4dCBpbnRvIFNlYXJjaCBieSBpbWFnZSBidXR0b24KICAgICAgICAgICAgdmFyIHNlYXJjaEJ5SW1hZ2VUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICBsb2NhbGlzZU9iamVjdChzZWFyY2hCeUltYWdlVGV4dCwgJzxzcGFuPlZpZXcgSW1hZ2U8L3NwYW4+Jyk7CiAgICAgICAgICAgIHNlYXJjaEJ5SW1hZ2UuYXBwZW5kQ2hpbGQoc2VhcmNoQnlJbWFnZVRleHQpOwoKICAgICAgICAgICAgLy8gQXBwZW5kIFNlYXJjaCBieSBpbWFnZSBidXR0b24KICAgICAgICAgICAgaW1hZ2VUZXh0LmFwcGVuZENoaWxkKHNlYXJjaEJ5SW1hZ2UpOwoKICAgICAgICAgICAgLy8gQ3JlYXRlIFZpZXcgaW1hZ2UgYnV0dG9uCiAgICAgICAgICAgIHZhciB2aWV3SW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICB2aWV3SW1hZ2Uuc2V0QXR0cmlidXRlKCdjbGFzcycsICdleHRfYWRkb24nKTsKCiAgICAgICAgICAgIC8vIEFkZCBnbG9iZSB0byBWaWV3IGltYWdlIGJ1dHRvbgogICAgICAgICAgICB2YXIgdmlld0ltYWdlTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgdmFyIGdsb2JlSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5fUkt3Ll93dGYuX1B0ZicpLmNsb25lTm9kZSh0cnVlKTsKICAgICAgICAgICAgdmlld0ltYWdlTGluay5hcHBlbmRDaGlsZChnbG9iZUljb24pOwoKICAgICAgICAgICAgLy8gYWRkIHRleHQgdG8gdmlldyBpbWFnZSBidXR0b24KICAgICAgICAgICAgdmFyIHZpZXdJbWFnZVRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuX1dLdycpLmNsb25lTm9kZSh0cnVlKTsKICAgICAgICAgICAgbG9jYWxpc2VPYmplY3Qodmlld0ltYWdlVGV4dCwgJ1ZpZXcgSW1hZ2UnKTsKICAgICAgICAgICAgdmlld0ltYWdlTGluay5hcHBlbmRDaGlsZCh2aWV3SW1hZ2VUZXh0KTsKCiAgICAgICAgICAgIC8vIEFkZCBWaWV3IGltYWdlIGJ1dHRvbiBVUkwKICAgICAgICAgICAgdmlld0ltYWdlTGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBpbWFnZVVSTCk7CiAgICAgICAgICAgIHZpZXdJbWFnZUxpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7CiAgICAgICAgICAgIHZpZXdJbWFnZS5hcHBlbmRDaGlsZCh2aWV3SW1hZ2VMaW5rKTsKCiAgICAgICAgICAgIC8vIEFkZCBWaWV3IGltYWdlIGJ1dHRvbiB0byBJbWFnZSBMaW5rcwogICAgICAgICAgICB2YXIgc2F2ZSA9IGltYWdlTGlua3MuY2hpbGROb2Rlc1sxXTsKICAgICAgICAgICAgaW1hZ2VMaW5rcy5pbnNlcnRCZWZvcmUodmlld0ltYWdlLCBzYXZlKTsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJBZGRpbmcgRE9ORSEhISIpOwogICAgICAgIH0KICAgIH0KfQoKCiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7CiAgICAgICAgICAgIGlmIChtdXRhdGlvbi5hZGRlZE5vZGVzICYmIG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBtdXRhdGlvbi5hZGRlZE5vZGVzW2ldOwogICAgICAgICAgICAgICAgICAgIGFkZExpbmtzKG5ld05vZGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKCiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgfSk7CgogICAgYWRkTGlua3MoZG9jdW1lbnQuYm9keSk7Cgp9KSgpOw==",
            "storage": {
                "data": {},
                "ts": 1606921521538
            },
            "uuid": "21e7da1a-d1ce-4acf-9838-a7b170386128"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/233-wanikani-levelup-celebrator/code/WaniKani%20LevelUP%20Celebrator.user.js",
            "name": "WaniKani LevelUP Celebrator",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://www.wanikani.com/",
                        "https://www.wanikani.com/dashboard"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-end",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 7,
            "source": "",
            "storage": {
                "data": {},
                "ts": 1607436649632
            },
            "uuid": "f56e4394-b554-42b3-b894-0263a9d2f095"
        },
        {
            "enabled": false,
            "file_url": "https://greasyfork.org/scripts/26481-wanikani-katakana-madness/code/WaniKani%20Katakana%20Madness.user.js",
            "name": "WaniKani Katakana Madness",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://www.wanikani.com/*",
                        "http://www.wanikani.com/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-end",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [
                        "https://www.wanikani.com/lesson/*"
                    ],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 8,
            "source": "",
            "storage": {
                "data": {},
                "ts": 1607436649633
            },
            "uuid": "8e97bd94-02cf-48f1-a58b-ff272dd5aadb"
        },
        {
            "enabled": false,
            "file_url": "https://raw.githubusercontent.com/selslack/codingame-sync-userscript/master/codingame-sync.user.js",
            "name": "Codingame File Sync",
            "options": {
                "awareOfChrome": false,
                "check_for_updates": true,
                "comment": null,
                "compat_arrayleft": false,
                "compat_foreach": false,
                "compat_forvarin": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_uW_gmonkey": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "*://www.codingame.com/*"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 9,
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgIENvZGluZ2FtZSBGaWxlIFN5bmMKLy8gQG1hdGNoICAgICo6Ly93d3cuY29kaW5nYW1lLmNvbS8qCi8vIEB2ZXJzaW9uICAyLjAKLy8gQGdyYW50ICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIGlucHV0ID0gbnVsbDsKICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHsKICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlc1tpXS5ub2RlVHlwZSAhPT0gMSkgeyAvLyBFTEVNRU5UX05PREUKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGV0IGJ1dHRvbnMgPSBtdXRhdGlvbi5hZGRlZE5vZGVzW2ldLnF1ZXJ5U2VsZWN0b3IoImRpdi5jb2RlLWJ1dHRvbnMiKTsKCiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbnMpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NOYW1lID0gImlkZS10YWIiOwogICAgICAgICAgICAgICAgaW5wdXQudHlwZSA9ICJmaWxlIjsKCiAgICAgICAgICAgICAgICBidXR0b25zLmluc2VydEJlZm9yZShpbnB1dCwgYnV0dG9ucy5maXJzdENoaWxkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi5yZW1vdmVkTm9kZXNbaV0ubm9kZVR5cGUgIT09IDEpIHsgLy8gRUxFTUVOVF9OT0RFCiAgICAgICAgICAgICAgICAgICAgY29udGludWUgOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghbXV0YXRpb24ucmVtb3ZlZE5vZGVzW2ldLnF1ZXJ5U2VsZWN0b3IoImRpdi5jb2RlLWJ1dHRvbnMiKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpbnB1dCA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwoKICAgIHZhciBzeW5jID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICghaW5wdXQgfHwgaW5wdXQuZmlsZXMubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgICAgIHJldHVybiA7CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChpbnB1dC5maWxlc1swXSk7CiAgICAgICAgfQogICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgIC8vIFNhZmVseSBpZ25vcmUgYW55IGVycm9yCiAgICAgICAgfQogICAgfTsKCiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgd2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCJFeHRlcm5hbEVkaXRvclRvSURFIiwgewogICAgICAgICAgICBkZXRhaWw6IHsKICAgICAgICAgICAgICAgIHN0YXR1czogInVwZGF0ZUNvZGUiLAogICAgICAgICAgICAgICAgY29kZTogZXZlbnQudGFyZ2V0LnJlc3VsdC5yZXBsYWNlKC9cclxuL2csICJcbiIpLnJlcGxhY2UoL1xyL2csICJcbiIpCiAgICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICB9OwoKICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgewogICAgICAgIHN1YnRyZWU6IHRydWUsCiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlLAogICAgICAgIGNoYXJhY3RlckRhdGE6IGZhbHNlCiAgICB9KTsKCiAgICBzZXRJbnRlcnZhbChzeW5jLCAxMDAwKTsKfSkoKTsK",
            "storage": {
                "data": {},
                "ts": 1607436649634
            },
            "uuid": "7c2e57a8-c3c9-405e-93b2-c4bb6a4312aa"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/396170-bunpro-disable-backspace-undo/code/Bunpro:%20Disable%20Backspace%20Undo.user.js",
            "name": "Bunpro: Disable Backspace Undo",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [
                        "*community.bunpro.jp*"
                    ],
                    "orig_includes": [
                        "*bunpro.jp/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 10,
            "requires": [],
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IERpc2FibGUgQmFja3NwYWNlIFVuZG8KLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAxLjAuNgovLyBAZGVzY3JpcHRpb24gIERpc2FibGVzIHRoZSBiYWNrc3BhY2UgZnVuY3Rpb25hbGl0eSBpbiByZXZpZXdzCi8vIEBhdXRob3IgICAgICAgS3VtaXJlaQovLyBAaW5jbHVkZSAgICAgICpidW5wcm8uanAvKgovLyBAZXhjbHVkZSAgICAgICpjb21tdW5pdHkuYnVucHJvLmpwKgovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zNzA2MjMtYnVucHJvLWhlbHBmdWwtZXZlbnRzL2NvZGUvQnVucHJvOiUyMEhlbHBmdWwlMjBFdmVudHMuanM/dmVyc2lvbj05NzQzNjkKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgdmFyICQgPSB3aW5kb3cuJDsKICAgICQoJ2h0bWwnKVswXS5hZGRFdmVudExpc3RlbmVyKCdxdWl6LXBhZ2UnLCAoKT0+ewogICAgICAgIHZhciBpbnB1dF9lbGVtID0gJCgnI3N0dWR5LWFuc3dlci1pbnB1dCcpOwogICAgICAgICQoJ2JvZHknKS5rZXlkb3duKChldmVudCk9PnsKICAgICAgICAgICAgdmFyIGNvbG9ycyA9IGlucHV0X2VsZW0uY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJykubWF0Y2goL1xkKy9nKTsKICAgICAgICAgICAgdmFyIHN1bSA9IGNvbG9ycy5yZWR1Y2UoKGEsIGIpPT5OdW1iZXIoYSkrTnVtYmVyKGIpKTsKICAgICAgICAgICAgdmFyIHJlZG5lc3MgPSBjb2xvcnNbMF0vc3VtOwogICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSA4ICYmIHJlZG5lc3MgPiAwLjQpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgaW5wdXRfZWxlbS5ibHVyKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwp9KSgpOwo=",
            "storage": {
                "data": {},
                "ts": 1607436649636
            },
            "uuid": "a83ba4d2-a68b-45d6-b98f-e0c8a83de351"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/35063-wanikani-double-check/code/Wanikani%20Double-Check.user.js",
            "name": "Wanikani Double-Check",
            "options": {
                "check_for_updates": false,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "https://www.wanikani.com/extra_study/session*",
                        "https://www.wanikani.com/review/session*",
                        "https://preview.wanikani.com/extra_study/session*",
                        "https://preview.wanikani.com/review/session*"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-end",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "sandbox": null,
                "tab_types": null,
                "unwrap": null
            },
            "position": 11,
            "source": "",
            "storage": {
                "data": {},
                "ts": 1606921521559
            },
            "uuid": "462d24eb-4e66-4f82-b8dd-79a94b1c8872"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/371388-bunpro-mistake-delay/code/Bunpro:%20Mistake%20Delay.user.js",
            "name": "Bunpro: Mistake Delay",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [
                        "*community.bunpro.jp*"
                    ],
                    "orig_includes": [
                        "*bunpro.jp/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 12,
            "requires": [],
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IE1pc3Rha2UgRGVsYXkKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjIuOAovLyBAZGVzY3JpcHRpb24gIFByZXZlbnRzIHByZW1hdHVyZSB3cm9uZyBhbnN3ZXIgc3VibWlzc2lvbi4KLy8gQGF1dGhvciAgICAgICBLdW1pcmVpCi8vIEBpbmNsdWRlICAgICAgKmJ1bnByby5qcC8qCi8vIEBleGNsdWRlICAgICAgKmNvbW11bml0eS5idW5wcm8uanAqCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzM3MDYyMy1idW5wcm8taGVscGZ1bC1ldmVudHMvY29kZS9CdW5wcm86JTIwSGVscGZ1bCUyMEV2ZW50cy5qcz92ZXJzaW9uPTk3NDM2OQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CgkvLyBTZWNvbmRzIG9mIGRlbGF5Cgljb25zdCBkZWxheSA9IDI7CgoJLy8gV2FpdCB1bnRpbCB3ZSdyZSByZXZpZXdpbmcKCSQoJ0hUTUwnKVswXS5hZGRFdmVudExpc3RlbmVyKCdxdWl6LXBhZ2UnLCBmdW5jdGlvbigpIHsKCQkvLyBBZGQgdGhlIHN0YW5kYXJkIHN0eWxpbmcgdG8gdGhlIGRpc2FibGVkIGJ1dHRvbgoJCWFkZENTUygpOwoKCQkvLyBEbyBzdHVmZiB3aGVuIHdlIHByZXNzIGVudGVyIG9yIGJhY2tzcGFjZQoJCSQoJyNzdHVkeS1hbnN3ZXItaW5wdXQnKS5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7CgkJCXZhciBlbGVtID0gJCgnI3N0dWR5LWFuc3dlci1pbnB1dCcpOwoJCQkvLyBJbml0aWF0ZSBkZWxhdGUgd2hlbiB3ZSBwcmVzcyBlbnRlciwgZ2V0IHRoZSBhbnN3ZXIgd3JvbmcsIGFuZCBubyBkZWxheSBpcyBhbHJlYWR5IGFjdGl2ZQoJCQl2YXIgYmtnID0gZWxlbVswXS5zdHlsZS5iYWNrZ3JvdW5kOwoJCQlpZiAoYmtnICE9ICIiKSB7CgkJCQl2YXIgYmtnX2xzdCA9IGJrZy5zbGljZSg1LCBia2cubGVuZ3RoLTEpLnNwbGl0KCcsICcpOwoJCQkJaWYgKGV2ZW50LndoaWNoID09IDEzICYmIE51bWJlcihia2dfbHN0WzBdKSA+IE51bWJlcihia2dfbHN0WzFdKSArIE51bWJlcihia2dfbHN0WzJdKSAmJiAhJCgnI3N1Ym1pdC1zdHVkeS1hbnN3ZXItZGlzYWJsZWQnKS5sZW5ndGgpIHsKCQkJCQllbmFibGVEZWxheSgpOwoJCQkJCXNldFRpbWVvdXQoZGlzYWJsZURlbGF5LCBkZWxheSoxMDAwKTsKCQkJCX0KCQkJfQoJCX0pOwoJCSQoJ2JvZHknKS5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7CgkJCS8vIENhbmNlbCBkZWxheSBpZiB3ZSBwcmVzcyBiYWNrc3BhY2UgYWZ0ZXIgZ2V0dGluZyBhbiBhbnN3ZXIgd3JvbmcKCQkJaWYgKGV2ZW50LndoaWNoID09IDggJiYgJCgnI3N1Ym1pdC1zdHVkeS1hbnN3ZXItZGlzYWJsZWQnKS5sZW5ndGgpIGRpc2FibGVEZWxheSgpOwoJCX0pOwoJfSk7CgoJLy8gTWFrZXMgdXNlciB1bmFibGUgdG8gY29udGludWUgdG8gdGhlIG5leHQgaXRlbQoJZnVuY3Rpb24gZW5hYmxlRGVsYXkoKSB7CgkJJCgnI3N0dWR5LWFuc3dlci1pbnB1dCcpWzBdLmJsdXIoKTsKCQkkKCcjc3VibWl0LXN0dWR5LWFuc3dlcicpLmF0dHIoJ2lkJywgJ3N1Ym1pdC1zdHVkeS1hbnN3ZXItZGlzYWJsZWQnKTsKCX0KCgkvLyBNYWtlcyB1c2VyIGFibGUgdG8gY29udGludWUgdG8gdGhlIG5leHQgaXRlbSBhZ2FpbgoJZnVuY3Rpb24gZGlzYWJsZURlbGF5KCkgewoJCSQoJyNzdWJtaXQtc3R1ZHktYW5zd2VyLWRpc2FibGVkJykuYXR0cignaWQnLCAnc3VibWl0LXN0dWR5LWFuc3dlcicpOwoJfQoKCS8vIEFkZHMgdGhlIG5lZWRlZCBDU1MKCWZ1bmN0aW9uIGFkZENTUygpIHsKCQkkKCdoZWFkJykuYXBwZW5kKCc8c3R5bGU+I3N1Ym1pdC1zdHVkeS1hbnN3ZXItZGlzYWJsZWQgeycgKwoJCQkJCQkgJ3dpZHRoOiAxNSU7JyArCgkJCQkJCSAncmlnaHQ6IDA7JyArCgkJCQkJCSAndGV4dC1hbGlnbjogY2VudGVyOycgKwoJCQkJCQkgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICsKCQkJCQkJICdmb250LXdlaWdodDogNDAwOycgKwoJCQkJCQkgJ2ZvbnQtc2l6ZTogMjBweDsnICsKCQkJCQkJICd6LWluZGV4OiAxMDA7JyArCgkJCQkJCSAnYm9yZGVyLXJhZGl1czogMDsnICsKCQkJCQkJICdjb2xvcjogd2hpdGU7JyArCgkJCQkJCSAnYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7JyArCgkJCQkJCSAnfScgKwoJCQkJCQkgJ0BtZWRpYSAobWF4LXdpZHRoOiA0ODBweCkgI3N1Ym1pdC1zdHVkeS1hbnN3ZXItZGlzYWJsZWQge2ZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O308L3N0eWxlPicpCgl9Cn0pKCk7Cg==",
            "storage": {
                "data": {},
                "ts": 1607436649639
            },
            "uuid": "0550b6ba-fa53-4ccf-823b-54b3cacc7116"
        },
        {
            "enabled": true,
            "file_url": "https://greasyfork.org/scripts/370019-bunpro-auto-show-info/code/Bunpro:%20Auto-show%20Info.user.js",
            "name": "Bunpro: Auto-show Info",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [
                        "*community.bunpro.jp*"
                    ],
                    "orig_includes": [
                        "*bunpro.jp/study*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 13,
            "requires": [],
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IEF1dG8tc2hvdyBJbmZvCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4yLjEwCi8vIEBkZXNjcmlwdGlvbiAgQXV0b21hdGljYWxseSBleHBhbmRzIHRoZSBmdWxsIGdyYW1tYXIgaW5mbyB3aGVuIHlvdSBnZXQgYSByZXZpZXcgd3JvbmcuCi8vIEBhdXRob3IgICAgICAgS3VtaXJlaQovLyBAaW5jbHVkZSAgICAgICpidW5wcm8uanAvc3R1ZHkqCi8vIEBleGNsdWRlICAgICAgKmNvbW11bml0eS5idW5wcm8uanAqCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQzMjQxOC13YWl0LWZvci1zZWxlY3Rvci9jb2RlL1dhaXQlMjBGb3IlMjBTZWxlY3Rvci5qcz92ZXJzaW9uPTk5MDIwNwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zNzA2MjMtYnVucHJvLWhlbHBmdWwtZXZlbnRzL2NvZGUvQnVucHJvOiUyMEhlbHBmdWwlMjBFdmVudHMuanM/dmVyc2lvbj05OTAyMTEKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKOyhmdW5jdGlvbiAoKSB7CiAgICAvL3dhaXQgdW50aWwgd2UncmUgcmV2aWV3aW5nCiAgICAkKCdIVE1MJylbMF0uYWRkRXZlbnRMaXN0ZW5lcigncXVpei1wYWdlJywgZnVuY3Rpb24gKCkgewogICAgICAgIC8vZG8gc3R1ZmYgd2hlbiB3ZSBwcmVzcyBlbnRlciBhbmQgZ2V0IHRoZSBhbnN3ZXIgd3JvbmcKICAgICAgICAkKCcjc3R1ZHktYW5zd2VyLWlucHV0Jykub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09IDEzKSB7CiAgICAgICAgICAgICAgICBvcGVuSWZXcm9uZygpCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC8vZG8gc3R1ZmYgd2hlbiB3ZSBjbGljayBzdWJtaXQgYW5kIGdldCB0aGUgYW5zd2VyIHdyb25nCiAgICAgICAgJCgnI3N1Ym1pdC1zdHVkeS1hbnN3ZXInKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9wZW5JZldyb25nKCkKICAgICAgICB9KQogICAgfSkKCiAgICAvL29wZW5zIHRoZSBpbmZvIGlmIHlvdSBnZXQgdGhlIGl0ZW0gd3JvbmcKICAgIGZ1bmN0aW9uIG9wZW5JZldyb25nKCkgewogICAgICAgIGlmICgkKCcub29wcy1idXR0b24nKVswXS5zdHlsZS5kaXNwbGF5ID09ICdibG9jaycgfHwgJCgnI2xlYXJuLW5ldy1ncmFtbWFyLXBhZ2UnKS5sZW5ndGgpIHsKICAgICAgICAgICAgJCgnLnNob3ctZ3JhbW1hci10ZXh0JykuY2xpY2soKQogICAgICAgIH0KICAgIH0KfSkoKQo=",
            "storage": {
                "data": {},
                "ts": 1607436649642
            },
            "uuid": "ea2cd70b-7fb9-4481-9ec5-2e5761f5ad46"
        },
        {
            "enabled": true,
            "file_url": "https://raw.githubusercontent.com/Mottie/Github-userscripts/master/github-code-folding.user.js",
            "name": "GitHub Code Folding",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://github.com/*",
                        "https://gist.github.com/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "sandbox": null,
                "tab_types": null,
                "unwrap": null
            },
            "position": 14,
            "requires": [],
            "source": "",
            "storage": {
                "data": {},
                "ts": 1636664956605
            },
            "uuid": "03039f55-1392-4e34-89d8-7a324da08087"
        },
        {
            "enabled": true,
            "file_url": "https://raw.githubusercontent.com/Mottie/GitHub-userscripts/master/github-sort-reactions.user.js",
            "name": "GitHub Sort Reactions",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://github.com/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "sandbox": null,
                "tab_types": null,
                "unwrap": null
            },
            "position": 15,
            "requires": [],
            "source": "",
            "storage": {
                "data": {},
                "ts": 1636665066915
            },
            "uuid": "31410fbe-5cc6-4a14-a3f3-339c85f4d804"
        },
        {
            "enabled": true,
            "file_url": "https://raw.githubusercontent.com/Mottie/GitHub-userscripts/master/github-update-fork.user.js",
            "name": "GitHub Update Fork",
            "options": {
                "check_for_updates": true,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [
                        "https://github.com/*"
                    ],
                    "orig_matches": [],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 16,
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEdpdEh1YiBVcGRhdGUgRm9yawovLyBAdmVyc2lvbiAgICAgMC4yLjAKLy8gQGRlc2NyaXB0aW9uIEEgdXNlcnNjcmlwdCB0aGF0IGFkZHMgYSBsaW5rIHRvIHVwZGF0ZSB5b3VyIGZvcmsKLy8gQGxpY2Vuc2UgICAgIE1JVAovLyBAYXV0aG9yICAgICAgUm9iIEdhcnJpc29uCi8vIEBuYW1lc3BhY2UgICBodHRwczovL2dpdGh1Yi5jb20vTW90dGllCi8vIEBpbmNsdWRlICAgICBodHRwczovL2dpdGh1Yi5jb20vKgovLyBAcnVuLWF0ICAgICAgZG9jdW1lbnQtaWRsZQovLyBAZ3JhbnQgICAgICAgbm9uZQovLyBAaWNvbiAgICAgICAgaHR0cHM6Ly9naXRodWIuZ2l0aHViYXNzZXRzLmNvbS9waW5uZWQtb2N0b2NhdC5zdmcKLy8gQHVwZGF0ZVVSTCAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Nb3R0aWUvR2l0SHViLXVzZXJzY3JpcHRzL21hc3Rlci9naXRodWItdXBkYXRlLWZvcmsudXNlci5qcwovLyBAZG93bmxvYWRVUkwgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01vdHRpZS9HaXRIdWItdXNlcnNjcmlwdHMvbWFzdGVyL2dpdGh1Yi11cGRhdGUtZm9yay51c2VyLmpzCi8vIEBzdXBwb3J0VVJMICBodHRwczovL2dpdGh1Yi5jb20vTW90dGllL0dpdEh1Yi11c2Vyc2NyaXB0cy9pc3N1ZXMKLy8gPT0vVXNlclNjcmlwdD09CigoKSA9PiB7CgkidXNlIHN0cmljdCI7CgoJZnVuY3Rpb24gZ2V0VXBzdHJlYW1CcmFuY2goY29tcGFyZUxpbmssIGluZm8pIHsKCQkvLyBMb29rIGZvciAiY29tbWl0IGJlaGluZCIgb3IgImNvbW1pdHMgYmVoaW5kIgoJCWlmIChjb21wYXJlTGluayAmJiBpbmZvICYmIC9jb21taXRzP1xzYmVoaW5kLy50ZXN0KGluZm8udGV4dENvbnRlbnQpKSB7CgkJCS8vIGZvcmtlZCBmcm9tIGxpbmsgdGV4dCAiOnVzZXIvOnJlcG8iCgkJCWNvbnN0IHJlZ2V4cCA9IC9iZWhpbmRccyooLis6Wy1cdy5dKykvOwoJCQkvLyBUaGUgbWF0Y2ggd2lsbCBpbmNsdWRlIHRoZSBzZW50ZW5jZSBwZXJpb2QgYmVjYXVzZSBicmFuY2ggbmFtZXMgbWF5CgkJCS8vIGluY2x1ZGUgYSB2ZXJzaW9uIG51bWJlciwgZS5nLiAidXNlcjpteS1icmFuY2gtdjEuMCIKCQkJY29uc3QgYnJhbmNoID0gKGluZm8udGV4dENvbnRlbnQubWF0Y2gocmVnZXhwKSB8fCBbXSlbMV07CgkJCXJldHVybiBicmFuY2gKCQkJCT8gYnJhbmNoLnN1YnN0cmluZygwLCBicmFuY2gubGVuZ3RoIC0gMSkKCQkJCTogbnVsbDsKCQl9CgkJcmV0dXJuIG51bGw7Cgl9CgoJZnVuY3Rpb24gZ2V0VXNlckJyYW5jaCgpIHsKCQkvLyBUaGUgYnJhbmNoIHNlbGVjdG9yIG1heSBjb250YWluIGEgdHJ1bmNhdGVkIGJyYW5jaCBuYW1lLCBzbyB1c2UgdGhlIHVybAoJCWNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7CgkJY29uc3QgaW5kZXggPSBwYXRoLmluZGV4T2YoIi90cmVlLyIpOwoJCXJldHVybiBpbmRleCA+IC0xCgkJCT8gcGF0aC5zdWJzdHJpbmcoaW5kZXggKyA2LCBwYXRoLmxlbmd0aCkKCQkJOiAibWFzdGVyIjsKCX0KCglmdW5jdGlvbiBhZGRMaW5rKGNvbXBhcmVMaW5rLCBpbmZvKSB7CgkJY29uc3QgYnJhbmNoID0gZ2V0VXBzdHJlYW1CcmFuY2goY29tcGFyZUxpbmssIGluZm8pOwoJCWlmIChicmFuY2gpIHsKCQkJY29uc3QgdXNlckJyYW5jaCA9IGdldFVzZXJCcmFuY2goKTsKCQkJY29uc3QgcHJMaW5rID0gY29tcGFyZUxpbmsucHJldmlvdXNFbGVtZW50U2libGluZzsKCQkJY29uc3QgbGluayA9IHByTGluay5jbG9uZU5vZGUoKTsKCQkJLy8gaHR0cHM6Ly9naXRodWIuY29tLzxGT1JLPi88UkVQTz4vY29tcGFyZS88QlJBTkNIPi4uLjxTT1VSQ0U+OjxCUkFOQ0g+CgkJCWxpbmsuaHJlZiA9IGAke2NvbXBhcmVMaW5rLmhyZWZ9LyR7dXNlckJyYW5jaH0uLi4ke2JyYW5jaH1gOwoJCQlsaW5rLmNsYXNzTGlzdC5hZGQoImdodWYtdXBkYXRlLWxpbmsiKTsKCQkJbGluay5hcHBlbmRDaGlsZCgkKCJzdmciLCBwckxpbmspLmNsb25lTm9kZSh0cnVlKSk7CgkJCWxpbmsuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiBVcGRhdGUgZm9yayIpKTsKCQkJcHJMaW5rLmluc2VydEFkamFjZW50RWxlbWVudCgiYmVmb3JlYmVnaW4iLCBsaW5rKTsKCQl9Cgl9CgoJZnVuY3Rpb24gaW5pdCgpIHsKCQljb25zdCBjb21wYXJlTGluayA9ICQoImFbaHJlZio9J3B1bGwvbmV3J10gKyBhW2hyZWYkPScvY29tcGFyZSddIik7CgkJY29uc3QgaW5mbyA9IGNvbXBhcmVMaW5rPy5jbG9zZXN0KCIuQm94Iik/LmZpcnN0RWxlbWVudENoaWxkOwoJCWlmIChjb21wYXJlTGluayAmJiBpbmZvKSB7CgkJCWFkZExpbmsoY29tcGFyZUxpbmssIGluZm8pOwoJCX0KCX0KCglmdW5jdGlvbiAkKHN0ciwgZWwgPSBkb2N1bWVudCkgewoJCXJldHVybiBlbC5xdWVyeVNlbGVjdG9yKHN0cik7Cgl9CgoJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigicGpheDplbmQiLCBpbml0KTsKCWluaXQoKTsKCn0pKCk7Cg==",
            "storage": {
                "data": {},
                "ts": 1636665106109
            },
            "uuid": "20aad555-b97e-4d4a-bfe5-7853897de54d"
        },
        {
            "enabled": false,
            "file_url": "https://raw.githubusercontent.com/Mottie/Github-userscripts/master/github-title-notification.user.js",
            "name": "GitHub - Pin Repos to Sidebar",
            "options": {
                "check_for_updates": false,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "http*://github.com/*dashboard",
                        "http*://github.com/"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null
            },
            "position": 17,
            "source": "",
            "storage": {
                "data": {
                    "pinnedRepos": "s[\"/mistsys/mist_go_utils\",\"/mistsys/mist-ap\",\"/corewa-rs/corewars\",\"/mistsys/mist-agent-go\",\"/128technology/rules_128tech\",\"/mistsys/demoapi\",\"/ian-h-chamberlain/dotfiles\",\"/Meziu/ctru-rs\",\"/Meziu/rust-linker-fix-3ds\",\"/Meziu/rust-horizon\",\"/Meziu/cargo-3ds\",\"/corewa-rs/vscode-redcode\",\"/Juniper-SSN/ssr\",\"/ian-h-chamberlain/docker-rust-devkitarm\"]"
                },
                "ts": 1650393027096
            },
            "uuid": "c8c37d2c-a4d8-4ddd-accd-51cc5f2ea6a4"
        },
        {
            "enabled": true,
            "name": "Openstack Firefox Console Fixer",
            "options": {
                "check_for_updates": false,
                "comment": null,
                "compat_foreach": false,
                "compat_metadata": false,
                "compat_powerful_this": null,
                "compat_prototypes": false,
                "compat_wrappedjsobject": false,
                "compatopts_for_requires": true,
                "noframes": null,
                "override": {
                    "merge_connects": true,
                    "merge_excludes": true,
                    "merge_includes": true,
                    "merge_matches": true,
                    "orig_connects": [],
                    "orig_excludes": [],
                    "orig_includes": [],
                    "orig_matches": [
                        "https://spaceport.lab.128technology.com:6082/spice_auto.html*"
                    ],
                    "orig_noframes": null,
                    "orig_run_at": "document-idle",
                    "use_blockers": [],
                    "use_connects": [],
                    "use_excludes": [],
                    "use_includes": [],
                    "use_matches": []
                },
                "run_at": null,
                "tab_types": null,
                "unwrap": null
            },
            "position": 18,
            "source": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBPcGVuc3RhY2sgRmlyZWZveCBDb25zb2xlIEZpeGVyCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9naXRodWIuY29tL2lhbi1oLWNoYW1iZXJsYWluCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgRml4IGEgaG9ycmlibGUgb3BlbnN0YWNrIGJ1ZyBieSBpbmplY3Rpbmcgc29tZSBrZXljb2RlcyBmb3IgRmlyZWZveAovLyBAYXV0aG9yICAgICAgIElhbiBDaGFtYmVybGFpbiAoR2l0SHViIEBpYW4taC1jaGFtYmVybGFpbikKLy8gQG1hdGNoICAgICAgICBodHRwczovL3NwYWNlcG9ydC5sYWIuMTI4dGVjaG5vbG9neS5jb206NjA4Mi9zcGljZV9hdXRvLmh0bWwqCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly9zcGFjZXBvcnQubGFiLjEyOHRlY2hub2xvZ3kuY29tL3N0YXRpYy9kYXNoYm9hcmQvaW1nL2Zhdmljb24uaWNvCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICBpZiAodHlwZW9mIGZpcmVmb3hfc2Nhbm1hcCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAvLyBGaXJlZm94IHNlZW1zIHRvIHNlbmQgMjI0IHdoZXRoZXIgdGhlIGxlZnQgb3IgcmlnaHQg4oyYIGtleSBpcyBwcmVzc2VkCiAgICAgICAgLy8gVmFsdWUgZnJvbSBodHRwczovL2dpdGxhYi5mcmVlZGVza3RvcC5vcmcvc3BpY2Uvc3BpY2UtaHRtbDUvLS9ibG9iL3NwaWNlLWh0bWw1LTAuMS43L3V0aWxzLmpzI0wyMTAKICAgICAgICBmaXJlZm94X3NjYW5tYXBbMjI0XSA9IDB4RTA1QjsgLy8gS0VZX0xNZXRhCgogICAgICAgIC8vIEVuYWJsZSBudW1sb2NrLCBmb3Igc29tZSByZWFzb24gdGhpcyBkb2Vzbid0IHdvcmsgYnkgZGVmYXVsdC4gTWF5YmUgYmVjYXVzZSBpdCBzZW5kcyBhIEtleV9DTEVBUiBpbnN0ZWFkPwogICAgICAgIGZpcmVmb3hfc2Nhbm1hcFsxMl0gPSBLRVlfTnVtTG9jazsKICAgIH0KfSkoKTs=",
            "storage": {
                "data": {},
                "ts": 1656605726968
            },
            "uuid": "ed158b6e-8995-48a5-8a2a-2e63f4546680"
        }
    ],
    "settings": {
        "configMode": 100,
        "editor_autoLint": true,
        "editor_autoLintMaxLen": "300000",
        "editor_autoSave": false,
        "editor_easySave": true,
        "editor_electricChars": true,
        "editor_enabled": true,
        "editor_fontSize": "100",
        "editor_highlightSelectionMatches": "cursor",
        "editor_highlightTrailingWhitespace": true,
        "editor_indentUnit": "4",
        "editor_indentWithTabs": "spaces",
        "editor_keyMap": "vim",
        "editor_lineWrapping": false,
        "editor_linter_config": null,
        "editor_tabMode": "indent",
        "editor_tabSize": "4",
        "editor_theme": "monokai",
        "editor_trimTrailingSpacesFromModifiedLines": true,
        "enabled": true,
        "favicon_service": "google",
        "layout": "default",
        "layout_user_css": "",
        "notification_showUpdate": "changelog",
        "script_blacklist_server": [
            {
                "rules": [
                    "/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"
                ],
                "severity": 2
            },
            {
                "name": "SaveFrom.net helper",
                "reason": "Shows advertisements",
                "rules": [
                    "/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/",
                    "/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"
                ],
                "severity": 3
            },
            {
                "reasons": {
                    "en": "Used for a phishing compain to compromise users of baon-nutrition.com"
                },
                "rules": [
                    "/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"
                ],
                "severity": 8
            },
            {
                "name": "Local YouTube Downloader",
                "reasons": {
                    "en": "Shows a disturbing alert message at every page with a youtube frame or iframe"
                },
                "rules": [
                    "/https?:\\/\\/greasyfork\\.org\\/scripts\\/369400-.*\\.user\\.js.*/"
                ],
                "severity": 8
            }
        ]
    }
}
