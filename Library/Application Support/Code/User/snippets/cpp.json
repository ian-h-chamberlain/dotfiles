{
	/*
    // Place your snippets for C++ here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    }
	*/
	"class declaration": {
		"description": "Generates Rule of 5 for a class",
		"prefix": "class",
		"body": [
			"class ${1}",
			"{",
			"  public:",
			"    ${1}() = default;",
			"    ~${1}() = default;",
			"",
			"    ${1}(const ${1}&) = default;",
			"    ${1}(${1}&&) = default;",
			"    ${1}& operator=(const ${1}&) = default;",
			"    ${1}& operator=(${1}&&) = default;",
			"",
			"  private:",
			"};"
		],
	},
	"struct declaration": {
		"description": "Generates Rule of 5 for a struct",
		"prefix": "struct",
		"body": [
			"struct ${1}",
			"{",
			"    ${1}() = default;",
			"    ~${1}() = default;",
			"",
			"    ${1}(const ${1}&) = default;",
			"    ${1}(${1}&&) = default;",
			"    ${1}& operator=(const ${1}&) = default;",
			"    ${1}& operator=(${1}&&) = default;",
			"};"
		],
	},
	"ignore diagnostic": {
		"description": "Compiler directive to skip a warning",
		"prefix": [
			"#diag"
		],
		"body": [
			"#pragma GCC diagnostic push",
			"#pragma GCC diagnostic ignored \"-W${1:deprecated-declarations}\"",
			"${LINE_COMMENT:reason} ${2}",
			"${TM_SELECTED_TEXT}${0}",
			"",
			"#pragma GCC diagnostic pop",
		]
	},
	"disable clang-format": {
		"description": "Comments to disable clang-format",
		"prefix": [
			"clang",
			"cf"
		],
		"body": [
			"${LINE_COMMENT} clang-format off",
			"${TM_SELECTED_TEXT}${0}",
			"${LINE_COMMENT} clang-format on",
		]
	}
}
