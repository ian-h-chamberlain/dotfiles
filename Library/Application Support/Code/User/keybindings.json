// Place your key bindings in this file to overwrite the defaults
[
    {
        "key": "alt+left",
        "command": "cursorWordPartStartLeft",
        "when": "textInputFocus && editorLangId != 'org'"
    },
    {
        "key": "alt+right",
        "command": "cursorWordPartRight",
        "when": "textInputFocus && editorLangId != 'org'"
    },
    {
        "key": "alt+shift+left",
        "command": "cursorWordPartStartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+shift+right",
        "command": "cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+backspace",
        "command": "deleteWordPartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "alt+delete",
        "command": "deleteWordPartRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.openNextRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "alt+cmd+right",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "cmd+k cmd+right",
        "command": "-workbench.action.focusNextGroup"
    },
    {
        "key": "alt+cmd+left",
        "command": "workbench.action.focusPreviousGroup"
    },
    {
        "key": "cmd+k cmd+left",
        "command": "-workbench.action.focusPreviousGroup"
    },
    {
        "key": "shift+cmd+[",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "shift+cmd+]",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "alt+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+[",
        "command": "editor.fold",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+[",
        "command": "-editor.fold",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+]",
        "command": "editor.unfold",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+k cmd+\\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "cmd+k \\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "alt+cmd+t",
        "command": "-workbench.action.closeOtherEditors"
    },
    {
        "key": "alt+cmd+t",
        "command": "workbench.action.tasks.test"
    },
    {
        "command": "workbench.action.terminal.focusNext",
        "key": "ctrl+tab",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "end",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+end",
        "command": "-workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "home",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+home",
        "command": "-workbench.action.terminal.scrollToTop",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "cmd+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "cmd+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "escape",
        "command": "workbench.action.closeMessages",
        "when": "globalMessageVisible"
    },
    /*
    // NOTE (vscode-vim): this weird unbind/rebind is needed for proper panel
    // behavior, both for find widget and lower terminal-panel
    {
        "key": "escape",
        "command": "-extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "escape",
        "command": "workbench.action.closePanel",
        "when": "!(editorTextFocus && !inDebugRepl) && !terminalFocus && vim.active"
    },
    {
        "command": "extension.vim_escape",
        "key": "escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    */
    // vscode-neovim:
    // TODO: rebindings for search to use findWidget?
    {
        // This doesn't seem to work correctly...
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && neovim.mode != insert"
    },
    {
        // but this does!
        "key": "escape",
        "command": "workbench.action.closePanel",
        "when": "neovim.mode == normal && !(editorTextFocus && !inDebugRepl) && !terminalFocus"
    },
    // end vscode-neovim
    {
        "command": "editor.action.startFindReplaceAction",
        "key": "cmd+r"
    },
    {
        "key": "alt+cmd+b",
        "command": "workbench.action.tasks.restartTask"
    },
    {
        "key": "cmd+l",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "cmd+k m",
        "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorFocus && editorLangId == 'python'"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-cursorWordPartRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-cursorWordPartStartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-cursorWordPartStartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "-deleteWordPartLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+delete",
        "command": "-deleteWordPartRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+f",
        "command": "-workbench.action.toggleFullScreen"
    },
    {
        "key": "alt+cmd+f",
        "command": "-editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+cmd+f",
        "command": "workbench.action.toggleFullScreen"
    },
    {
        "key": "cmd+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "cmd+numpad0",
        "command": "-workbench.action.zoomReset"
    },
    {
        "key": "alt+cmd+right",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "alt+cmd+left",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "shift+cmd+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "editor.action.indentUsingSpaces"
    },
    {
        "key": "shift+enter",
        "command": "-python.datascience.execSelectionInteractive",
        "when": "editorTextFocus && python.datascience.featureenabled && python.datascience.ownsSelection && !findInputFocussed && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !python.datascience.ownsSelection && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.terminal.splitInActiveWorkspace",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+enter",
        "command": "-search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "alt+left",
        "command": "cursorWordStartLeft",
        "when": "textInputFocus && editorLangId != 'org'"
    },
    {
        "key": "alt+left",
        "command": "-cursorWordStartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus && editorLangId != 'org'"
    },
    {
        "key": "alt+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus"
    }
]