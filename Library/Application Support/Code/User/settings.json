{
    "[c]": {
        "editor.defaultFormatter": "xaver.clang-format",
    },
    "[cpp]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "xaver.clang-format",
        "editor.detectIndentation": false
    },
    "[diff]": {
        "editor.trimAutoWhitespace": false,
        "files.trimFinalNewlines": false,
        "files.trimTrailingWhitespace": false,
    },
    "[dockerfile]": {
        "editor.quickSuggestions": {
            "strings": true,
        },
    },
    "[fish]": {
        "editor.formatOnSave": true
    },
    "[graphql]": {
        "editor.tabSize": 2,
    },
    "[groovy]": {
        "editor.formatOnSave": false
    },
    "[glsl]": {
        "editor.defaultFormatter": "xaver.clang-format",
        "editor.formatOnSave": true,
        "editor.colorDecorators": true
    },
    "[javascript]": {
        "editor.formatOnSave": false,
        "editor.tabSize": 2,
        "editor.defaultFormatter": "vscode.typescript-language-features",
    },
    "[json]": {
        "editor.formatOnSave": false,
        "editor.wordWrap": "on",
        "editor.tabSize": 2,
    },
    "[jsonc]": {
        "editor.formatOnSave": false,
        "editor.wordWrap": "on",
        "editor.tabSize": 2,
    },
    "[markdown]": {
        "editor.wordWrap": "on",
        "editor.quickSuggestions": false,
        "editor.tabSize": 2,
    },
    "[org]": {
        "editor.autoIndent": "advanced",
        "editor.tabSize": 1,
    },
    "[python]": {
        "editor.codeActionsOnSave": {
            "source.organizeImports": true,
            "source.fixAll": true,
        },
        "editor.formatOnSave": true,
        "editor.parameterHints.enabled": false,
    },
    "[rust]": {
        "editor.formatOnSave": true,
    },
    "[robotframework]": {
    },
    "[redcode]": {
        // Commonly used for aligning instructions
        "editor.tabSize": 4,
        "editor.wordWrap": "on"
    },
    "[starlark]": {
        "editor.formatOnSave": true,
    },
    "[toml]": {
        "editor.formatOnSave": true
    },
    "[typescript]": {
        "editor.formatOnSave": false,
        "editor.codeActionsOnSave": {
            "source.fixAll.tslint": true,
        },
        "editor.tabSize": 2,
        "editor.defaultFormatter": "vscode.typescript-language-features",
    },
    "[xml]": {
        "editor.defaultFormatter": "DotJoshJohnson.xml",
    },

    // TODO: reorganize the remaining sections into extension-specific vs VSCode
    "arduino.defaultBaudRate": 9600,
    "arduino.logLevel": "info",
    "arduino.path": "/Users/ianchamberlain/Applications/Arduino.app",
    "arduino.enableUSBDetection": true,
    "arduino.skipHeaderProvider": false,

    "atlascode.bitbucket.enabled": false,
    "atlascode.helpExplorerEnabled": false,
    "atlascode.jira.hover.enabled": true,
    "atlascode.jira.explorer.refreshInterval": 60,
    "atlascode.jira.statusbar.enabled": false,
    "atlascode.jira.todoIssues.triggers": [
        "TODO",
        "BUG",
        "FIXME",
        "ISSUE",
        "HACK",
        "XXX",
    ],
    "atlascode.jira.todoIssues.enabled": true,
    "atlascode.outputLevel": "debug",

    "bazel.buildifierExecutable": "/usr/local/bin/buildifier",
    "bazel.buildifierFixOnFormat": false,
    "bazel.executable": "/usr/local/bin/bazelisk",
    "bazel.enableCodeLens": true,

    "breadcrumbs.enabled": true,

    "C_Cpp.autocomplete": "Disabled",
    "C_Cpp.formatting": "Disabled",
    "C_Cpp.enhancedColorization": "Disabled",
    "C_Cpp.intelliSenseEngine": "Disabled",
    "C_Cpp.intelliSenseEngineFallback": "Disabled",
    "C_Cpp.workspaceParsingPriority": "low",
    "C_Cpp.workspaceSymbols": "Just My Code",
    "C_Cpp.loggingLevel": "Information",

    "c-cpp-flylint.flexelint.enable": false,
    "c-cpp-flylint.flawfinder.enable": false,
    "c-cpp-flylint.ignoreParseErrors": false,
    "c-cpp-flylint.lizard.enable": false,
    "c-cpp-flylint.run": "onSave",

    "clangd.arguments": [
        "--compile-commands-dir=${workspaceFolder}/build",
        "--header-insertion=never",
        // "--log=verbose",
        "-j=2",
        "--pch-storage=disk",
        "--background-index"
    ],
    "clangd.checkUpdates": true,
    "clangd.path": "/Users/ichamberlain/Library/Application Support/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/14.0.3/clangd_14.0.3/bin/clangd",
    "clangd.onConfigChanged": "restart",

    "cmake.cmakePath": "/usr/local/bin/cmake",
    "cmake.configureOnOpen": false,
    "cmake.configureOnEdit": false,
    "cmake.skipConfigureIfCachePresent": true,

    "comments.openView": "never",

    "coverage-gutters.highlightdark": "rgba(73, 102, 22, 0.50)", // "#4b661680"
    "coverage-gutters.noHighlightDark": "rgba(143, 38, 72, 0.44)", // "#90274a70",
    "coverage-gutters.showLineCoverage": true,

    "cSpell.allowCompoundWords": true,
    "cSpell.enableFiletypes": [
        "c",
        "cmake",
        "dockerfile",
        "fish",
        "gitignore",
        "graphql",
        "groovy",
        "ini",
        "jinja",
        "json5",
        "lua",
        "makefile",
        "mib",
        "objective-c",
        "objective-cpp",
        "org",
        "perl",
        "perl6",
        "plist",
        "properties",
        "proto3",
        "robot",
        "rpm-spec",
        "ruby",
        "rust",
        "shellscript",
        "sls",
        "ssh_config",
        "starlark",
        "toml",
        "xml",
        "yang"
    ],
    "cSpell.customDictionaries": {
        "default": {
            "name": "default",
            "path": "~/.cspell/default.txt",
            "addWords": true,
            "scope": "user"
        }
    },
    "cSpell.globRoot": "${workspaceFolder}",
    "cSpell.ignorePaths": [
        "**/package-lock.json",
        "**/node_modules/**",
        "**/vscode-extension/**",
        "**/.git/objects/**",
        "**/.vscode/**",
        "*.code-workspace",
        "**/Cargo.lock",
        "**/Cargo.toml",
        "**/mkiso.sh",
        "**/.cargo/**",
        "**/.rustup/**",
    ],
    "cSpell.flagWords": [
        "successfull",
        "instrcutions",
    ],
    "cSpell.showStatus": false,
    "cSpell.useGitignore": true,

    "debug.internalConsoleOptions": "openOnSessionStart",
    "debug.console.historySuggestions": false,
    "debug.console.acceptSuggestionOnEnter": "off",
    "debug.console.wordWrap": false,
    "debug.focusWindowOnBreak": true,
    "debug.onTaskErrors": "abort",

    "editor.accessibilitySupport": "off",
    "editor.find.cursorMoveOnType": true,
    "editor.fontFamily": "Input Mono, Monaco, 'Courier New', monospace",
    "editor.fontSize": 11,
    "editor.fontWeight": "100",
    "editor.inlayHints.enabled": "onUnlessPressed",
    "editor.bracketPairColorization.enabled": false,
    "editor.minimap.showSlider": "always",
    "editor.multiCursorModifier": "alt",
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "selection",
    "editor.rulers": [
        80,
        88,
        100,
    ],
    "editor.scrollBeyondLastLine": false,
    "editor.semanticHighlighting.enabled": true,
    "editor.semanticTokenColorCustomizations": {
        "[Monokai]": {
            "rules": {
                "variable:dockerfile": "#FD971F",
                "parameter:dockerfile": {
                    "fontStyle": "",
                    "foreground": "#F8F8F2",
                },

                "variable.readonly:go": "#AE81FF",

                "*.readonly:python": "#AE81FF",
                "enumMember:python": "#AE81FF",
                "property.declaration:python": "#A6E22E",

                // Normal rust customizations
                "builtinAttribute:rust": "#66D9EF",
                "selfKeyword:rust": "#FD971F",
                "variable.constant:rust": "#AE81FF",
                "variable.static:rust": "#AE81FF",

                // "injected" (i.e. doc-comment) rust customizations
                "attribute.injected:rust": "#F8F8F2",
                "attributeBracket.injected:rust": "#F8F8F2",
                "brace.injected:rust": "#F8F8F2",
                "bracket.injected:rust": "#F8F8F2",
                "builtinAttribute.injected:rust": "#66D9EF",
                "comma.injected:rust": "#F8F8F2",
                "generic.injected:rust": "#F8F8F2",
                "operator.injected:rust": "#F92672",
                "parenthesis.injected:rust": "#F8F8F2",
                "punctuation.injected:rust": "#F92672",
                "semicolon.injected:rust": "#F8F8F2",
                "unresolvedReference.injected:rust": "#F8F8F2",


                "keywordNameCall:robotframework": "#A6E22E",

                "tomlArrayKey:toml": "#F92672",
                "tomlTableKey:toml": "#F92672",
            },
        }
    },
    "editor.tokenColorCustomizations": {
        "[Monokai]": {
            "textMateRules": [
                {
                    "scope": "variable.key.toml",
                    "settings": {
                        "foreground": "#F92672"
                    },
                },
                {
                    "scope": "variable.key.table.toml",
                    "settings": {
                        "foreground": "#A6E22E",
                    },
                },
                {
                    "scope": "variable.key.array",
                    "settings": {
                        "foreground": "#A6E22E",
                    }
                },
                {
                    "scope": "variable.other.constant.starlark",
                    "settings": {
                        "foreground": "#AE81FF",
                    }
                }
            ],
        }
    },
    "editor.showFoldingControls": "always",
    "editor.snippetSuggestions": "inline",
    "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-_",

    "emeraldwalk.runonsave": {
        "commands": [
            {
                "match": "[.]go$",
                "cmd": "golines ${file} --write-output --ignored-dirs=vendor --shorten-comments --base-formatter=cat --max-len=88"
            },
        ]
    },

    "evenBetterToml.commands.copyTomlAsJson": true,
    "evenBetterToml.commands.copyJsonAsToml": true,
    "evenBetterToml.formatter.arrayAutoCollapse": false,
    "evenBetterToml.formatter.allowedBlankLines": 1,
    "evenBetterToml.formatter.reorderKeys": false,
    "evenBetterToml.formatter.arrayAutoExpand": false,
    "evenBetterToml.semanticTokens": true,
    "evenBetterToml.schema.associations": {
        "^(.*(/|\\\\)rust-toolchain([.]toml)?)$": "file:///Users/ianchamberlain/Documents/Development/taplo/schemas/rust-toolchain.toml.json",
        "^(.*(/[.]cargo/|\\\\[.]cargo\\\\)config.toml)$": "file:///Users/ianchamberlain/Documents/Development/taplo/schemas/cargo-config.toml.json"
    },
    "evenBetterToml.debug": true,

    "explorer.autoReveal": false,
    "explorer.confirmDelete": false,

    "extensions.autoUpdate": true,
    "extensions.ignoreRecommendations": false,
    "extensions.supportUntrustedWorkspaces": {
        "asvetliakov.vscode-neovim": {
            "supported": true,
            "version": "0.0.82"
        },
    },

    "files.associations": {
        "**/.cargo/config": "toml",
        "**/.ssh/*config*": "ssh_config",
        "**/.git/info/exclude": "gitignore",
        "*sshd_config*": "ssh_config",
        "*ssh_config*": "ssh_config",
        "**/bpython/config": "ini",
        "*.aliases": "shellscript",
        "*.bazel": "starlark",
        "*.h": "c",
        "*.pb.h": "cpp",
        "*.j2": "jinja",
        "*.log-*": "log",
        "*.log.*": "log",
        "*.org": "org",
        "*.path": "ini",
        "*.plist": "xml",
        "*.repo": "ini",
        "*.rs": "rust",
        "*.service": "ini",
        "*.sls": "sls",
        "*.unity": "yaml",
        "*Brewfile": "ruby",
        "*dockerfile*": "dockerfile",
        "*gitconfig*": "ini",
        ".bazelignore": "gitignore",
        ".clang-format": "yaml",
        ".coveragerc": "ini",
        ".gitmodules": "properties",
        "BUILD": "starlark",
        "Cargo.lock": "toml",
        "config.toml.example": "toml",
        "gdbinit": "shellscript",
        "vimrc": "viml",
        "yarn.lock": "yarnlock",
        ".clangd": "yaml",
        ".yarnrc": "yarnlock",
        "*dialogrc": "python",
        "*.timer": "ini",
        "*.conf": "ini",
        "*.spec": "rpm-spec",
        "*.hpp[}]": "cpp",
        "*.cpp[}]": "cpp",
        "*.py[}]": "python",
        "*.robot[}]": "robot",
        ".wokeignore": "gitignore",
        "*.bttpreset": "json",
        "Jenkinsfile*": "groovy",
        ".Brewfile": "ruby",
        "*.mmd": "Mermaid",
        "*.pica": "asm-intel-x86-generic",
        "CODEOWNERS": "codeowners",
        "*.meta": "json"
    },
    "files.exclude": {
        "**/.DS_Store": true,
        "**/.git": true,
        "**/.hg": true,
        "**/.svn": true,
        "**/CVS": true,
        "__pycache__": true,
    },
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "files.watcherExclude": {
        "**/.bazel_out/**": true,
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/.hg/store/**": true,
        "**/.mypy_cache/**": true,
        "**/.cache/**": true,
        "**/node_modules/**": true,
        "**/*bazel_out/**": true,
        "**/bazel-*/**": true,
        "**/execroot/**": true,
        "**/.cargo/**": true,
    },

    "git.autoRepositoryDetection": "openEditors",
    "git.detectSubmodules": true,
    "git.ignoreSubmodules": false,
    "git.enableSmartCommit": true,
    "git.openDiffOnClick": false,

    "githubIssues.useBranchForIssues": "prompt",
    "githubIssues.assignWhenWorking": false,
    "githubIssues.issueBranchTitle": "ian/issue${issueNumber}",
    "githubIssues.queries": [
        {
            "label": "My Issues",
            "query": "default"
        },
        {
            "label": "Created Issues",
            "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
        },
        {
            "label": "All Open Issues",
            "query": "state:open repo:${owner}/${repository} sort:created-desc"
        }
    ],
    "githubPullRequests.commentExpandState": "expandUnresolved",
    "githubPullRequests.createOnPublishBranch": "never",
    "githubPullRequests.fileListLayout": "tree",
    "githubPullRequests.queries": [
        {
            "label": "Waiting For My Review",
            "query": "is:open review-requested:${user}"
        },
        {
            "label": "Reviewed By Me",
            "query": "is:open reviewed-by:${user} -author:${user}"
        },
        {
            "label": "Assigned To Me",
            "query": "is:open assignee:${user}"
        },
        {
            "label": "Created By Me",
            "query": "is:open author:${user}"
        }
    ],
    "githubPullRequests.terminalLinksHandler": "github",
    "githubPullRequests.useReviewMode": {
        "merged": false,
        "closed": false
    },

    "gitlens.advanced.fileHistoryFollowsRenames": false,
    "gitlens.advanced.messages": {
        "suppressCommitHasNoPreviousCommitWarning": false,
        "suppressCommitNotFoundWarning": false,
        "suppressFileNotUnderSourceControlWarning": false,
        "suppressGitVersionWarning": false,
        "suppressLineUncommittedWarning": false,
        "suppressNoRepositoryWarning": false,
    },
    "gitlens.blame.avatars": false,
    "gitlens.blame.highlight.locations": [
        "gutter",
        "line",
        "overview"
    ],
    "gitlens.codeLens.authors.enabled": false,
    "gitlens.codeLens.enabled": false,
    "gitlens.codeLens.recentChange.enabled": false,
    "gitlens.currentLine.enabled": true,
    "gitlens.hovers.currentLine.enabled": true,
    "gitlens.hovers.currentLine.over": "annotation",
    "gitlens.keymap": "alternate",
    "gitlens.menus": {
        "editor": {
            "blame": true,
            "clipboard": true,
            "compare": true,
            "details": true,
            "history": true,
            "remote": true,
        },
        "editorGroup": {
            "blame": true,
            "compare": true,
        },
        "editorTab": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true,
        },
        "explorer": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true,
        },
        "scmGroup": {
            "compare": true,
            "openClose": true,
            "stash": true,
            "stashInline": true,
        },
        "scmItem": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true,
            "stash": true,
        }
    },
    "gitlens.mode.active": "review",
    "gitlens.mode.statusBar.enabled": false,
    "gitlens.plusFeatures.enabled": false,
    "gitlens.statusBar.enabled": false,
    "gitlens.views.repositories.autoRefresh": false,

    "go.buildOnSave": "off",
    "go.formatTool": "goimports",
    "go.lintOnSave": "file",
    "go.terminal.activateEnvironment": false, // prevent go from hijacking terminal when it starts
    "go.toolsManagement.autoUpdate": true,
    "go.vetOnSave": "off",
    "go.testExplorer.enable": true,
    "go.useLanguageServer": true,
    "gopls": {
        "ui.completion.usePlaceholders": true,
        "ui.navigation.importShortcut": "Definition",
        "ui.semanticTokens": true,
    },

    "groovyLint.format.enable": false,
    "groovyLint.format.useDocumentIndentSize": true,

    "grunt.autoDetect": "off",

    "gulp.autoDetect": "off",

    "hexeditor.columnWidth": 16,
    "hexeditor.showDecodedText": false,
    "hexeditor.defaultEndianness": "little",
    "hexeditor.inspectorType": "aside",

    "jake.autoDetect": "off",

    "jupyter.enabled": false,

    "lldb.adapterEnv": {
        "PYENV_VERSION": "system"
    },

    "macros": {
        "pullRequest.selectNextFile": [
            "list.focusDown",
            "list.select",
            "workbench.action.focusSideBar",
            "workbench.action.focusActiveEditorGroup",
        ],
        "pullRequest.selectPreviousFile": [
            "list.focusUp",
            "list.select",
            "workbench.action.focusSideBar",
            "workbench.action.focusActiveEditorGroup",
        ],
        "githubPullRequest.nextFile": [
            "workbench.action.closeActiveEditor",
            "pr:github.focus",
            "macros.pullRequest.selectNextFile",
        ],
        "githubPullRequest.previousFile": [
            "workbench.action.closeActiveEditor",
            "pr:github.focus",
            "macros.pullRequest.selectPreviousFile",
        ],
        // sad, these don't work properly without PR context...
        "githubPullRequest.markFileAsViewed": [
            "pr:github.focus",
            "list.selectAndPreserveFocus",
            "pr.markFileAsViewed",
            "workbench.action.focusActiveEditorGroup",
        ],
        "githubPullRequest.unmarkFileAsViewed": [
            "pr:github.focus",
            "list.selectAndPreserveFocus",
            "pr.unmarkFileAsViewed",
            "workbench.action.focusActiveEditorGroup",
        ],
    },

    "markdownlint.config": {
        "no-inline-html": {
            "allowed_elements": [
                "details",
                "summary",
            ]
        }
    },

    "merge-conflict.codeLens.enabled": true,
    "merge-conflict.autoNavigateNextConflict.enabled": false,
    "merge-conflict.decorators.enabled": true,
    "merge-conflict.diffViewPosition": "Below",

    "mermaid.theme": "dark",

    "nginx-conf-hint.syntax": "sublime",

    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },

    "org.todoKeywords": [
        "TODO",
        "PROG",
        "DONE",
    ],

    "output.smartScroll.enabled": false,

    "python.analysis.autoImportCompletions": false,
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.useLibraryCodeForTypes": true,
    "python.experiments.optOutFrom": [
        "All"
    ],
    "python.defaultInterpreterPath": "python",
    "python.formatting.provider": "black",
    "python.formatting.blackArgs": ["--fast"],
    "python.languageServer": "Pylance",
    "python.linting.lintOnSave": true,
    "python.linting.pylintCategorySeverity.refactor": "Information",
    "python.showStartPage": false,
    "python.terminal.activateEnvironment": false,
    "python.venvFolders": [],

    "remote.SSH.configFile": "~/.ssh/vscode_config",

    "rfLanguageServer.logLevel": "info",

    "robot.completions.keywords.format": "Title Case",
    "robot.completions.section_headers.form": "plural",
    "robot.codeFormatter": "builtinTidy",

    "redhat.telemetry.enabled": false,

    "rpmspec.lint": true,
    "rpmspec.rpmlintPath": "/Users/ichamberlain/Documents/tools/rpmlint",

    "rust-analyzer.runnables.extraArgs": [],
    "rust-analyzer.cargo.buildScripts.enable": true,
    "rust-analyzer.cargo.features": "all",
    "rust-analyzer.cargo.noDefaultFeatures": false,
    "rust-analyzer.checkOnSave.allTargets": true,
    "rust-analyzer.checkOnSave.command": "clippy",
    "rust-analyzer.checkOnSave.enable": true,
    "rust-analyzer.checkOnSave.features": "all",
    "rust-analyzer.checkOnSave.extraArgs": [
        "--",
        "--warn=clippy::pedantic",
    ],
    "rust-analyzer.diagnostics.warningsAsHint": [
        "clippy::missing_panics_doc"
    ],
    "rust-analyzer.completion.addCallParenthesis": true,
    "rust-analyzer.debug.engine": "vadimcn.vscode-lldb",
    "rust-analyzer.debug.engineSettings": {
        "lldb": {
            "terminal": "console",
            "args": [
                "--nocapture",
                "--test-threads=1",
            ],
        }
    },
    "rust-analyzer.debug.openDebugPane": true,
    "rust-analyzer.imports.granularity.enforce": true,
    "rust-analyzer.imports.granularity.group": "module",
    "rust-analyzer.imports.group.enable": true,
    "rust-analyzer.imports.prefix": "plain",
    "rust-analyzer.inlayHints.parameterHints.enable": true,
    "rust-analyzer.inlayHints.typeHints.enable": true,
    "rust-analyzer.inlayHints.chainingHints.enable": true,
    "rust-analyzer.inlayHints.closureReturnTypeHints.enable": true,
    "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "skip_trivial",
    "rust-analyzer.inlayHints.maxLength": 15,
    "rust-analyzer.inlayHints.reborrowHints.enable": true,
    "rust-analyzer.inlayHints.renderColons": true,
    "rust-analyzer.procMacro.enable": true,
    "rust-analyzer.runnableEnv": {
        // Makes debugging test output much more readable
        "RUST_TEST_THREADS": "1"
    },

    "rust-client.engine": "rust-analyzer",

    "remote.containers.defaultExtensions": [
        "asvetliakov.vscode-neovim"
    ],
    "remote.containers.repositoryConfigurationPaths": [
        "~/.config/vscode/devcontainers"
    ],

    "salt-lint.enable": true,
    "salt-lint.executablePath": "/Users/ichamberlain/.pyenv/versions/i95-py3/bin/salt-lint",
    "salt-lint.run": "onSave",

    "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/*.code-search": true,
        "Cargo.lock": true,
        "compile_commands.json": true,
        "bazel-event-log.json": true,
        "**/.tox": true,
    },
    "search.useIgnoreFiles": true,

    "shader-toy.reloadOnEditTextDelay": 2,
    "shader-toy.reloadOnEditText": true,

    "shellcheck.executablePath": "/usr/local/bin/shellcheck",
    "shellcheck.run": "onSave",
    "shellcheck.useWorkspaceRootAsCwd": true,
    "shellcheck.customArgs": ["--external-sources"],
    "shellcheck.enableQuickFix": true,
    "shellcheck.ignorePatterns": {
        "**/*.zsh": true,
        "**/*.fish": true,
        "**/BUILD": true,
    },

    "sortJSON.contextMenu": {
        "sortJSON": true,
        "sortJSONReverse": true,
        "sortJSONKeyLength": false,
        "sortJSONKeyLengthReverse": false,
        "sortJSONAlphaNum": false,
        "sortJSONAlphaNumReverse": false,
        "sortJSONValues": false,
        "sortJSONValuesReverse": false,
        "sortJSONType": false,
        "sortJSONTypeReverse": false
    },
    "sortJSON.orderOverride": [
        // for Vscode tasks:
        "version",
        "label",
        "type",
        "command",
    ],

    "telemetry.telemetryLevel": "off",

    // NOTE: slow terminal on big sur was fixable via
    // codesign --remove-signature "~/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Renderer).app"
    "terminal.external.osxExec": "iTerm.app",
    "terminal.integrated.copyOnSelection": true,
    "terminal.integrated.enableBell": true,
    "terminal.integrated.fontFamily": "Input Mono, Monaco, 'Courier New', monospace",
    "terminal.integrated.fontSize": 11,
    "terminal.integrated.fontWeight": "250",
    // actually use the colors I configure!!1!
    "terminal.integrated.minimumContrastRatio": 1,
    "terminal.integrated.macOptionClickForcesSelection": false,
    "terminal.integrated.drawBoldTextInBrightColors": false,
    "terminal.integrated.rendererType": "auto",
    "terminal.integrated.rightClickBehavior": "default",
    "terminal.integrated.scrollback": 10000,
    "terminal.integrated.experimentalUseTitleEvent": true,
    "terminal.integrated.gpuAcceleration": "auto",
    "terminal.integrated.defaultProfile.osx": "fish",
    "terminal.integrated.profiles.osx": {
        "bash": {
            "path": "bash",
            "args": [
                "-l"
            ],
            "icon": "terminal-bash"
        },
        "zsh": {
            "path": "zsh",
            "args": [
                "-l"
            ],
            "icon": "zap"
        },
        "fish": {
            "path": "/usr/local/bin/fish",
            "args": [
                "-l"
            ],
            "icon": "chevron-right"
        },
    },

    "todo-tree.filtering.includeHiddenFiles": true,
    "todo-tree.filtering.scopes": [
        {
            "name": "Default",
            "excludeGlobs": [
                "**/node_modules/**",
                "**/.git/**",
                "**/vendor/**",
            ],
        },
        {
            "name": "Production ",
            "excludeGlobs": [
                "**/test/**",
                "**/node_modules/**",
                "**/.git/**",
                "**/vendor/**",
            ]
        },
        {
            "name": "ConfigDirector",
            "includeGlobs": [
                "**/ConfigDirector/**"
            ]
        },
    ],
    "todo-tree.general.enableFileWatcher": false,
    "todo-tree.general.schemes": [
        "file",
        "untitled",
        "vscode-userdata"
    ],
    "todo-tree.general.tags": [
        "FIXME",
        "HACK",
        "TODO",
        "XXX",
        "NOTE",
        "[ ]",
    ],
    "todo-tree.highlights.defaultHighlight": {
        "gutterIcon": true,
        "opacity": 50,
    },
    "todo-tree.highlights.customHighlight": {
        "TODO": {
            "icon": "tasklist",
        },
        "BUG": {
            "icon": "bug",
        },
        "HACK": {
            "icon": "terminal",
            "foreground": "orangered",
        },
        "FIXME": {
            "icon": "alert",
            "foreground": "yellow"
        },
        "NOTE": {
            "icon": "info",
            "foreground": "cyan",
            "gutterIcon": true,
            "hideFromTree": true,
        },
        "[ ]": {
            "icon": "tasklist",
        }
    },
    "todo-tree.regex.regex": "((//|#|<!--|;|/\\*|^|\"\"\"|\"\\$comment\"\\s*:\\s*\"|\\{#-?)\\s*($TAGS)|^\\s*[-\\*] \\[ \\])",
    "todo-tree.tree.buttons.export": true,
    "todo-tree.tree.buttons.reveal": true,
    "todo-tree.tree.buttons.scanMode": true,

    "typescript.check.npmIsInstalled": false,

    // Mouse selection seems to cause more problems than it's worth...
    "vscode-neovim.mouseSelectionStartVisualMode": false,
    "vscode-neovim.neovimExecutablePaths.darwin": "/usr/local/bin/nvim",
    "vscode-neovim.neovimInitVimPaths.darwin": "~/.vimrc",
    "vscode-neovim.neovimInitVimPaths.linux": "~/.vimrc",
    "vscode-neovim.neovimWidth": 2000,
    "vscode-neovim.logLevel": "error",


    "window.restoreWindows": "folders",
    "window.title": "${folderName}${separator}${activeEditorMedium} ${dirty}",

    "workbench.editorAssociations": {
        "*.ipynb": "jupyter.notebook.ipynb"
    },
    "workbench.colorCustomizations": {
        "editor.selectionBackground": "#9d550f",
        "editorCursor.foreground": "#9d550f",
        "diffEditor.insertedTextBackground": "#4b661655",
        // get closer to rust-analyzer inlay hint style before it started using native ones
        "editorInlayHint.background": "#00000000",

        // Converted from iTerm2 using https://gist.github.com/2xAA/bd01638dc9ca46c590fda06c4ef0cc5a

        "terminal.foreground": "#32ff3b",
        "terminalCursor.background": "#ffffff",
        "terminalCursor.foreground": "#46f949",
        "terminal.ansiBlack": "#000000",
        "terminal.ansiBlue": "#0026e6",
        "terminal.ansiBrightBlack": "#797979",
        "terminal.ansiBrightBlue": "#4b67fc",
        "terminal.ansiBrightCyan": "#04e7ea",
        "terminal.ansiBrightGreen": "#00da2a",
        "terminal.ansiBrightMagenta": "#ec3be9",
        "terminal.ansiBrightWhite": "#ebeaeb",
        "terminal.ansiBrightYellow": "#eae83b",
        "terminal.ansiCyan": "#00b3bf",
        "terminal.ansiGreen": "#009600",
        "terminal.ansiMagenta": "#c12fbf",
        "terminal.ansiBrightRed": "#ec2f22",
        "terminal.ansiRed": "#aa1a0f",
        "terminal.ansiWhite": "#cbcbcb",
        "terminal.ansiYellow": "#a9a722",

        // Override for transparency; for some reason opacity only appears to
        // matter in the margin but I kinda like how it looks, so w/e
        "terminal.background": "#0000006f",
    },
    "workbench.colorTheme": "Monokai",
    "workbench.editor.enablePreview": false,
    "workbench.editor.highlightModifiedTabs": true,
    "workbench.editor.untitled.labelFormat": "name",
    "workbench.editor.untitled.hint": "hidden",
    "workbench.fontAliasing": "auto",
    "workbench.settings.editor": "json",
    "workbench.startupEditor": "newUntitledFile",

    "xmlTools.enforcePrettySelfClosingTagOnFormat": true,
    "xmlTools.splitAttributesOnFormat": true,
    "xmlTools.splitXmlnsOnFormat": true,
    "xml.downloadExternalResources.enabled": true,
    "xml.validation.resolveExternalEntities": true,

    "yaml.schemas": {
        "https://json.schemastore.org/github-workflow": [
            "**/.github/workflows/**/*.yaml",
            "**/.github/workflows/**/*.yml"
        ],
        "file:///Users/ichamberlain/.vscode/extensions/atlassian.atlascode-2.10.12/resources/schemas/pipelines-schema.json": "bitbucket-pipelines.yml"
    },
}
